// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bloom

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BloomMetaData contains all meta data concerning the Bloom contract.
var BloomMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getLayerMetadata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"filterSizeBits_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"filter_\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"layerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"}],\"name\":\"testToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"newFilters\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bitLens\",\"type\":\"uint256[]\"}],\"name\":\"updateCascade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234602257600e60a5565b60146026565b611fe66100b18239611fe690f35b602c565b60405190565b600080fd5b60001b90565b90604660018060a01b03916031565b9181191691161790565b60018060a01b031690565b90565b606d60696071926050565b605b565b6050565b90565b607b90605e565b90565b6085906074565b90565b90565b90609b609760a192607e565b6088565b82546037565b9055565b60ae336000608b565b56fe60806040526004361015610013575b610437565b61001e60003561005d565b806356e7f6c714610058578063a50e2b4314610053578063b163337d1461004e5763d423db2a0361000e57610400565b61031a565b6101c8565b6100a9565b60e01c90565b60405190565b600080fd5b600080fd5b600091031261007e57565b61006e565b90565b61008f90610083565b9052565b91906100a790600060208501940190610086565b565b346100d9576100b9366004610073565b6100d56100c4610445565b6100cc610063565b91829182610093565b0390f35b610069565b600080fd5b6100ec81610083565b036100f357565b600080fd5b90503590610105826100e3565b565b906020828203126101215761011e916000016100f8565b90565b61006e565b5190565b60209181520190565b60005b838110610147575050906000910152565b806020918301518185015201610136565b601f801991011690565b61018161018a60209361018f9361017881610126565b9384809361012a565b95869101610133565b610158565b0190565b6101b86101c59492936101ae60608401956000850190610086565b6020830190610086565b6040818403910152610162565b90565b346101fb576101f76101e36101de366004610107565b6106e4565b6101ee939193610063565b93849384610193565b0390f35b610069565b600080fd5b600080fd5b600080fd5b909182601f830112156102495781359167ffffffffffffffff831161024457602001926020830284011161023f57565b61020a565b610205565b610200565b909182601f830112156102885781359167ffffffffffffffff831161028357602001926020830284011161027e57565b61020a565b610205565b610200565b9060608282031261030f57600082013567ffffffffffffffff811161030a57816102b891840161020f565b929093602082013567ffffffffffffffff811161030557836102db91840161024e565b929093604082013567ffffffffffffffff8111610300576102fc920161024e565b9091565b6100de565b6100de565b6100de565b61006e565b60000190565b3461034f5761033961032d36600461028d565b94939093929192611480565b610341610063565b8061034b81610314565b0390f35b610069565b909182601f8301121561038e5781359167ffffffffffffffff831161038957602001926001830284011161038457565b61020a565b610205565b610200565b906020828203126103c557600082013567ffffffffffffffff81116103c0576103bc9201610354565b9091565b6100de565b61006e565b151590565b6103d8906103ca565b9052565b9160206103fe9294936103f7604082019660008301906103cf565b0190610086565b565b3461043257610419610413366004610393565b906115ce565b9061042e610425610063565b928392836103dc565b0390f35b610069565b600080fd5b600090565b5490565b61044d61043c565b506104586001610441565b90565b606090565b60209181520190565b60007f496e76616c6964206c6179657200000000000000000000000000000000000000910152565b61049e600d602092610460565b6104a781610469565b0190565b6104c19060208101906000818303910152610491565b90565b156104cb57565b6104d3610063565b62461bcd60e51b8152806104e9600482016104ab565b0390fd5b634e487b7160e01b600052603260045260246000fd5b600052602060002090565b600052602060002090565b90602061052b818306601f039361050e565b91040191565b61053a81610441565b8210156105555761054c600391610503565b91020190600090565b6104ed565b90565b60001c90565b90565b6105726105779161055d565b610563565b90565b6105849054610566565b90565b634e487b7160e01b600052602260045260246000fd5b90600160028304921680156105bd575b60208310146105b857565b610587565b91607f16916105ad565b60209181520190565b600052602060002090565b90600092918054906105f66105ef8361059d565b80946105c7565b9160018116908160001461064f5750600114610612575b505050565b61061f91929394506105d0565b916000925b818410610637575050019038808061060d565b60018160209295939554848601520191019290610624565b92949550505060ff191682521515602002019038808061060d565b90610674916105db565b90565b634e487b7160e01b600052604160045260246000fd5b9061069790610158565b810190811067ffffffffffffffff8211176106b157604052565b610677565b906106d66106cf926106c6610063565b9384809261066a565b038361068d565b565b6106e1906106b6565b90565b610732610738916106f361043c565b506106fc61043c565b5061070561045b565b5061072b8161072561071f61071a6001610441565b610083565b91610083565b106104c4565b6001610531565b5061055a565b906107456001830161057a565b9061076160006107576002860161057a565b94019293926106d8565b90565b60018060a01b031690565b61077b6107809161055d565b610764565b90565b61078d905461076f565b90565b60018060a01b031690565b6107a490610790565b90565b60007f4e6f74206f776e65720000000000000000000000000000000000000000000000910152565b6107dc6009602092610460565b6107e5816107a7565b0190565b6107ff90602081019060008183039101526107cf565b90565b1561080957565b610811610063565b62461bcd60e51b815280610827600482016107e9565b0390fd5b9061085e95949392916108593361085361084d6108486000610783565b61079b565b9161079b565b14610802565b611280565b565b5090565b5090565b60007f4e656564206b20666f722065616368206c617965720000000000000000000000910152565b61089d6015602092610460565b6108a681610868565b0190565b6108c09060208101906000818303910152610890565b90565b156108ca57565b6108d2610063565b62461bcd60e51b8152806108e8600482016108aa565b0390fd5b60007f4e656564206269744c656e20666f722065616368206c61796572000000000000910152565b610921601a602092610460565b61092a816108ec565b0190565b6109449060208101906000818303910152610914565b90565b1561094e57565b610956610063565b62461bcd60e51b81528061096c6004820161092e565b0390fd5b90565b90565b61098a61098561098f92610970565b610973565b610083565b90565b60007f4174206c65617374206f6e65206c617965720000000000000000000000000000910152565b6109c76012602092610460565b6109d081610992565b0190565b6109ea90602081019060008183039101526109ba565b90565b156109f457565b6109fc610063565b62461bcd60e51b815280610a12600482016109d4565b0390fd5b634e487b7160e01b600052601160045260246000fd5b610a3b610a4191939293610083565b92610083565b91610a4d838202610083565b928184041490151715610a5c57565b610a16565b610a6c906003610a2c565b90565b1c90565b90610a879060001990602003600802610a6f565b8154169055565b1b90565b91906008610aae910291610aa860001984610a8e565b92610a8e565b9181191691161790565b610acc610ac7610ad192610083565b610973565b610083565b90565b90565b9190610aed610ae8610af593610ab8565b610ad4565b908354610a92565b9055565b610b0b91610b0561043c565b91610ad7565b565b5b818110610b19575050565b80610b276000600193610af9565b01610b0e565b90610b3e9060001990600802610a6f565b191690565b81610b4d91610b2d565b906002021790565b90600091610b6d610b65826105d0565b928354610b43565b905555565b601f602091010490565b91929060208210600014610bd657601f8411600114610ba657610ba0929350610b43565b90555b5b565b5090610bcc610bd1936001610bc3610bbd856105d0565b92610b72565b82019101610b0d565b610b55565b610ba3565b50610c0d8293610be76001946105d0565b610c06610bf385610b72565b820192601f861680610c18575b50610b72565b0190610b0d565b600202179055610ba4565b610c2490888603610a73565b38610c00565b929091680100000000000000008211610c8c57602011600014610c7d5760208110600014610c6157610c5b91610b43565b90555b5b565b60019160ff1916610c71846105d0565b55600202019055610c5e565b60019150600202019055610c5f565b610677565b908154610c9d8161059d565b90818311610cc6575b818310610cb4575b50505050565b610cbd93610b7c565b38808080610cae565b610cd283838387610c2a565b610ca6565b6000610ce291610c91565b565b634e487b7160e01b600052600060045260246000fd5b90600003610d0d57610d0b90610cd7565b565b610ce4565b60006002610d3992610d2683808301610cfa565b610d338360018301610af9565b01610af9565b565b90600003610d4e57610d4c90610d12565b565b610ce4565b5b818110610d5f575050565b80610d6d6000600393610d3b565b01610d54565b9091828110610d82575b505050565b610da0610d9a610d94610dab95610a61565b92610a61565b92610503565b918201910190610d53565b388080610d7d565b90680100000000000000008111610ddc5781610dd1610dda93610441565b90828155610d73565b565b610677565b6000610dec91610db3565b565b90600003610e0157610dff90610de1565b565b610ce4565b6001610e129101610083565b90565b600080fd5b600080fd5b600080fd5b903590600160200381360303821215610e66570180359067ffffffffffffffff8211610e6157602001916001820236038313610e5c57565b610e1f565b610e1a565b610e15565b90821015610e86576020610e829202810190610e24565b9091565b6104ed565b9190811015610e9b576020020190565b6104ed565b35610eaa816100e3565b90565b60007f6b206d757374206265203e203000000000000000000000000000000000000000910152565b610ee2600d602092610460565b610eeb81610ead565b0190565b610f059060208101906000818303910152610ed5565b90565b15610f0f57565b610f17610063565b62461bcd60e51b815280610f2d60048201610eef565b0390fd5b60007f6269744c656e206d757374206265203e20300000000000000000000000000000910152565b610f666012602092610460565b610f6f81610f31565b0190565b610f899060208101906000818303910152610f59565b90565b15610f9357565b610f9b610063565b62461bcd60e51b815280610fb160048201610f73565b0390fd5b5090565b90565b610fd0610fcb610fd592610fb9565b610973565b610083565b90565b60007f6269744c656e206578636565647320662e6c656e677468202a20380000000000910152565b61100d601b602092610460565b61101681610fd8565b0190565b6110309060208101906000818303910152611000565b90565b1561103a57565b611042610063565b62461bcd60e51b8152806110586004820161101a565b0390fd5b90565b5490565b600052602060002090565b6110778161105f565b82101561109257611089600391611063565b91020190600090565b6104ed565b6110a08161105f565b680100000000000000008110156110c4576110c09160018201815561106e565b9091565b610677565b90565b6110e06110db6110e5926110c9565b610973565b610083565b90565b6110f76110fd91939293610083565b92610083565b820391821161110857565b610a16565b9190601f811161111d575b505050565b61112961114e936105d0565b90602061113584610b72565b83019310611156575b61114790610b72565b0190610b0d565b388080611118565b91506111478192905061113e565b9161116f9082610fb5565b9067ffffffffffffffff8211611231576111938261118d855461059d565b8561110d565b600090601f83116001146111c8579180916111b7936000926111bc575b5050610b43565b90555b565b909150013538806111b0565b601f198316916111d7856105d0565b9260005b818110611219575091600293918560019694106111ff575b505050020190556111ba565b61120f910135601f841690610b2d565b90553880806111f3565b919360206001819287870135815501950192016111db565b610677565b906112419291611164565b565b60001b90565b9061125660001991611243565b9181191691161790565b9061127561127061127c92610ab8565b610ad4565b8254611249565b9055565b9594929193956112b6611294828490610860565b6112b06112aa6112a5898890610864565b610083565b91610083565b146108c3565b6112e66112c4868590610864565b6112e06112da6112d58b8990610864565b610083565b91610083565b14610947565b61130d6112f4828490610860565b6113076113016000610976565b91610083565b116109ed565b61131960006001610dee565b6113236000610976565b5b8061134161133b611336858790610860565b610083565b91610083565b1015611476578061146c8160028b6114658b61145c6113986113938e61138a8f8f908f6114719f926113859361137992919091610e6b565b9c909c98919091610e8b565b610ea0565b96908b91610e8b565b610ea0565b916113b6856113b06113aa6000610976565b91610083565b11610f08565b6113d3836113cd6113c76000610976565b91610083565b11610f8c565b61140d836114066114006113fb6113eb8c8790610fb5565b6113f56008610fbc565b90610a2c565b610083565b91610083565b1115611033565b61141f61141a600161105c565b611097565b505061145261144c60016114466114366001610441565b61144060016110cc565b906110e8565b90610531565b5061055a565b9660008801611236565b60018501611260565b9101611260565b610e06565b611324565b5050505050509050565b9061148e959493929161082b565b565b600090565b60007f4e6f206c61796572730000000000000000000000000000000000000000000000910152565b6114ca6009602092610460565b6114d381611495565b0190565b6114ed90602081019060008183039101526114bd565b90565b156114f757565b6114ff610063565b62461bcd60e51b815280611515600482016114d7565b0390fd5b90565b90565b61153361152e6115389261151c565b610973565b610083565b90565b634e487b7160e01b600052601260045260246000fd5b61155d61156391610083565b91610083565b90811561156e570690565b61153b565b60007f756e726561636861626c65000000000000000000000000000000000000000000910152565b6115a8600b602092610460565b6115b181611573565b0190565b6115cb906020810190600081830391015261159b565b90565b9190611613906115dc611490565b506115e561043c565b506115f06001610441565b9361160e856116086116026000610976565b91610083565b116114f0565b6119ab565b9161161e6000610976565b5b8061163261162c84610083565b91610083565b10156117365761167d61165061164a60018490610531565b5061055a565b600081019061166d60026116666001840161057a565b920161057a565b906116788893611519565b611ce8565b816116a361169d6116988661169260016110cc565b906110e8565b610083565b91610083565b146116f4576116b290156103ca565b6116c4576116bf90610e06565b61161f565b8093506116dc91506116d6600261151f565b90611551565b6116ef6116e960016110cc565b91610083565b149190565b9150925061173161172b6117128561170c600261151f565b90611551565b61172561171f6000610976565b91610083565b146103ca565b916103ca565b149190565b61173e610063565b62461bcd60e51b815280611754600482016115b5565b0390fd5b9061176b611764610063565b928361068d565b565b67ffffffffffffffff81116117825760200290565b610677565b6117936117989161176d565b611758565b90565b369037565b906117be6117ad83611787565b926117b8849161176d565b9061179b565b565b6117ca60046117a0565b90565b600080fd5b67ffffffffffffffff81116117f0576117ec602091610158565b0190565b610677565b90826000939282370152565b90929192611816611811826117d2565b611758565b9381855260208501908284011161183257611830926117f5565b565b6117cd565b611842913691611801565b90565b60200190565b90565b60ff1690565b61186861186361186d9261184b565b610973565b61184e565b90565b90565b6118929061188c6118866118979461184e565b91611870565b90610a6f565b611870565b90565b6118a66118ab9161055d565b610ab8565b90565b67ffffffffffffffff1690565b6118cf6118ca6118d492610083565b610973565b6118ae565b90565b50600490565b906118e7826118d7565b8110156118f5576020020190565b6104ed565b90611904906118ae565b9052565b90565b61191f61191a61192492611908565b610973565b61184e565b90565b6119469061194061193a61194b9461184e565b91610083565b90610a6f565b610083565b90565b90565b61196561196061196a9261194e565b610973565b610083565b90565b90565b61198461197f6119899261196d565b610973565b61184e565b90565b90565b6119a361199e6119a89261198c565b610973565b610083565b90565b9190611adb611ac46119c8611af4936119c26117c0565b96611837565b6119da6119d482610126565b91611845565b20611a1b611a026119fd6119f8846119f260c0611854565b90611873565b61189a565b6118bb565b611a1688611a106000610976565b906118dd565b6118fa565b611a6d611a54611a3d611a2d8461189a565b611a37608061190b565b90611927565b611a4e67ffffffffffffffff611951565b166118bb565b611a6888611a6260016110cc565b906118dd565b6118fa565b611abf611aa6611a8f611a7f8461189a565b611a896040611970565b90611927565b611aa067ffffffffffffffff611951565b166118bb565b611aba88611ab4600261151f565b906118dd565b6118fa565b61189a565b611ad567ffffffffffffffff611951565b166118bb565b611aef84611ae9600361198f565b906118dd565b6118fa565b565b611b0a611b05611b0f9261198c565b610973565b61184e565b90565b611b1c905461059d565b90565b60007f62797465496e646578206f7574206f662072616e676500000000000000000000910152565b611b546016602092610460565b611b5d81611b1f565b0190565b611b779060208101906000818303910152611b47565b90565b15611b8157565b611b89610063565b62461bcd60e51b815280611b9f60048201611b61565b0390fd5b90565b611bba611bb5611bbf92611ba3565b610973565b610083565b90565b611bd6611bd1611bdb92610083565b610973565b61184e565b90565b90611be882611b12565b80821015611c1657602011600014611c065760209006601f0390915b565b611c0f91610519565b9091611c04565b6104ed565b60f81b90565b611c2a90611c1b565b90565b611c3d906008611c429302610a6f565b611c21565b90565b90611c509154611c2d565b90565b60f81c90565b611c6d611c68611c729261184e565b610973565b61184e565b90565b611c81611c8691611c53565b611c59565b90565b611ca890611ca2611c9c611cad9461184e565b9161184e565b90610a6f565b61184e565b90565b611cc4611cbf611cc9926110c9565b610973565b61184e565b90565b611ce0611cdb611ce592610970565b610973565b61184e565b90565b90929192611cf4611490565b50611cff6000610976565b5b80611d13611d0d87610083565b91610083565b1015611dd057611d95611d2885838591611ecd565b611d90611d8b611d85611d7e611d4885611d426003611af6565b90611927565b94611d6e8a611d68611d62611d5d8a93611b12565b610083565b91610083565b10611b7a565b611d786007611ba6565b16611bc2565b9388611bde565b90611c45565b611c75565b611c89565b611d9f6001611cb0565b16611db3611dad6000611ccc565b9161184e565b14611dc657611dc190610e06565b611d00565b5050505050600090565b5050505050600190565b611dee611de9611df39261151c565b610973565b6118ae565b90565b611e02611e08916118ae565b916118ae565b908115611e13570690565b61153b565b611e2c611e27611e31926118ae565b610973565b610083565b90565b611e3e90516118ae565b90565b611e4d611e53916118ae565b916118ae565b019067ffffffffffffffff8211611e6657565b610a16565b90565b611e82611e7d611e8792611e6b565b610973565b6118ae565b90565b611e96611e9c916118ae565b916118ae565b908115611ea7570490565b61153b565b600090565b90611ebc91026118ae565b90565b90611eca91016118ae565b90565b611fa3611fa891611f9d611eed611fad9695611ee761043c565b506118bb565b91611f8d611f88611f22611f1d84611f17611f1289611f0c6002611dda565b90611df6565b611e18565b906118dd565b611e34565b92611f82611f7d6002611f78611f72611f62611f528c611f4c81611f466002611dda565b90611df6565b90611e41565b611f5c6004611e6e565b90611df6565b611f6c6002611dda565b90611e8a565b91611dda565b611e41565b611e18565b906118dd565b611e34565b90611f96611eac565b5092611eb1565b90611ebf565b611e18565b611551565b9056fea2646970667358221220e266e582b3a5900fe25fc684983245b0c27436b87ae70bb730a851f6d5e8391964736f6c634300081e0033",
}

// BloomABI is the input ABI used to generate the binding from.
// Deprecated: Use BloomMetaData.ABI instead.
var BloomABI = BloomMetaData.ABI

// BloomBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BloomMetaData.Bin instead.
var BloomBin = BloomMetaData.Bin

// DeployBloom deploys a new Ethereum contract, binding an instance of Bloom to it.
func DeployBloom(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Bloom, error) {
	parsed, err := BloomMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BloomBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bloom{BloomCaller: BloomCaller{contract: contract}, BloomTransactor: BloomTransactor{contract: contract}, BloomFilterer: BloomFilterer{contract: contract}}, nil
}

// Bloom is an auto generated Go binding around an Ethereum contract.
type Bloom struct {
	BloomCaller     // Read-only binding to the contract
	BloomTransactor // Write-only binding to the contract
	BloomFilterer   // Log filterer for contract events
}

// BloomCaller is an auto generated read-only Go binding around an Ethereum contract.
type BloomCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BloomTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BloomTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BloomFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BloomFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BloomSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BloomSession struct {
	Contract     *Bloom            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BloomCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BloomCallerSession struct {
	Contract *BloomCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BloomTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BloomTransactorSession struct {
	Contract     *BloomTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BloomRaw is an auto generated low-level Go binding around an Ethereum contract.
type BloomRaw struct {
	Contract *Bloom // Generic contract binding to access the raw methods on
}

// BloomCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BloomCallerRaw struct {
	Contract *BloomCaller // Generic read-only contract binding to access the raw methods on
}

// BloomTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BloomTransactorRaw struct {
	Contract *BloomTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBloom creates a new instance of Bloom, bound to a specific deployed contract.
func NewBloom(address common.Address, backend bind.ContractBackend) (*Bloom, error) {
	contract, err := bindBloom(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bloom{BloomCaller: BloomCaller{contract: contract}, BloomTransactor: BloomTransactor{contract: contract}, BloomFilterer: BloomFilterer{contract: contract}}, nil
}

// NewBloomCaller creates a new read-only instance of Bloom, bound to a specific deployed contract.
func NewBloomCaller(address common.Address, caller bind.ContractCaller) (*BloomCaller, error) {
	contract, err := bindBloom(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BloomCaller{contract: contract}, nil
}

// NewBloomTransactor creates a new write-only instance of Bloom, bound to a specific deployed contract.
func NewBloomTransactor(address common.Address, transactor bind.ContractTransactor) (*BloomTransactor, error) {
	contract, err := bindBloom(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BloomTransactor{contract: contract}, nil
}

// NewBloomFilterer creates a new log filterer instance of Bloom, bound to a specific deployed contract.
func NewBloomFilterer(address common.Address, filterer bind.ContractFilterer) (*BloomFilterer, error) {
	contract, err := bindBloom(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BloomFilterer{contract: contract}, nil
}

// bindBloom binds a generic wrapper to an already deployed contract.
func bindBloom(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BloomMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bloom *BloomRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bloom.Contract.BloomCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bloom *BloomRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bloom.Contract.BloomTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bloom *BloomRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bloom.Contract.BloomTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bloom *BloomCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bloom.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bloom *BloomTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bloom.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bloom *BloomTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bloom.Contract.contract.Transact(opts, method, params...)
}

// GetLayerMetadata is a free data retrieval call binding the contract method 0xa50e2b43.
//
// Solidity: function getLayerMetadata(uint256 i) view returns(uint256 filterSizeBits_, uint256 k_, bytes filter_)
func (_Bloom *BloomCaller) GetLayerMetadata(opts *bind.CallOpts, i *big.Int) (struct {
	FilterSizeBits *big.Int
	K              *big.Int
	Filter         []byte
}, error) {
	var out []interface{}
	err := _Bloom.contract.Call(opts, &out, "getLayerMetadata", i)

	outstruct := new(struct {
		FilterSizeBits *big.Int
		K              *big.Int
		Filter         []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.FilterSizeBits = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.K = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Filter = *abi.ConvertType(out[2], new([]byte)).(*[]byte)

	return *outstruct, err

}

// GetLayerMetadata is a free data retrieval call binding the contract method 0xa50e2b43.
//
// Solidity: function getLayerMetadata(uint256 i) view returns(uint256 filterSizeBits_, uint256 k_, bytes filter_)
func (_Bloom *BloomSession) GetLayerMetadata(i *big.Int) (struct {
	FilterSizeBits *big.Int
	K              *big.Int
	Filter         []byte
}, error) {
	return _Bloom.Contract.GetLayerMetadata(&_Bloom.CallOpts, i)
}

// GetLayerMetadata is a free data retrieval call binding the contract method 0xa50e2b43.
//
// Solidity: function getLayerMetadata(uint256 i) view returns(uint256 filterSizeBits_, uint256 k_, bytes filter_)
func (_Bloom *BloomCallerSession) GetLayerMetadata(i *big.Int) (struct {
	FilterSizeBits *big.Int
	K              *big.Int
	Filter         []byte
}, error) {
	return _Bloom.Contract.GetLayerMetadata(&_Bloom.CallOpts, i)
}

// LayerCount is a free data retrieval call binding the contract method 0x56e7f6c7.
//
// Solidity: function layerCount() view returns(uint256)
func (_Bloom *BloomCaller) LayerCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bloom.contract.Call(opts, &out, "layerCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LayerCount is a free data retrieval call binding the contract method 0x56e7f6c7.
//
// Solidity: function layerCount() view returns(uint256)
func (_Bloom *BloomSession) LayerCount() (*big.Int, error) {
	return _Bloom.Contract.LayerCount(&_Bloom.CallOpts)
}

// LayerCount is a free data retrieval call binding the contract method 0x56e7f6c7.
//
// Solidity: function layerCount() view returns(uint256)
func (_Bloom *BloomCallerSession) LayerCount() (*big.Int, error) {
	return _Bloom.Contract.LayerCount(&_Bloom.CallOpts)
}

// TestToken is a free data retrieval call binding the contract method 0xd423db2a.
//
// Solidity: function testToken(bytes token) view returns(bool, uint256)
func (_Bloom *BloomCaller) TestToken(opts *bind.CallOpts, token []byte) (bool, *big.Int, error) {
	var out []interface{}
	err := _Bloom.contract.Call(opts, &out, "testToken", token)

	if err != nil {
		return *new(bool), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// TestToken is a free data retrieval call binding the contract method 0xd423db2a.
//
// Solidity: function testToken(bytes token) view returns(bool, uint256)
func (_Bloom *BloomSession) TestToken(token []byte) (bool, *big.Int, error) {
	return _Bloom.Contract.TestToken(&_Bloom.CallOpts, token)
}

// TestToken is a free data retrieval call binding the contract method 0xd423db2a.
//
// Solidity: function testToken(bytes token) view returns(bool, uint256)
func (_Bloom *BloomCallerSession) TestToken(token []byte) (bool, *big.Int, error) {
	return _Bloom.Contract.TestToken(&_Bloom.CallOpts, token)
}

// UpdateCascade is a paid mutator transaction binding the contract method 0xb163337d.
//
// Solidity: function updateCascade(bytes[] newFilters, uint256[] ks, uint256[] bitLens) returns()
func (_Bloom *BloomTransactor) UpdateCascade(opts *bind.TransactOpts, newFilters [][]byte, ks []*big.Int, bitLens []*big.Int) (*types.Transaction, error) {
	return _Bloom.contract.Transact(opts, "updateCascade", newFilters, ks, bitLens)
}

// UpdateCascade is a paid mutator transaction binding the contract method 0xb163337d.
//
// Solidity: function updateCascade(bytes[] newFilters, uint256[] ks, uint256[] bitLens) returns()
func (_Bloom *BloomSession) UpdateCascade(newFilters [][]byte, ks []*big.Int, bitLens []*big.Int) (*types.Transaction, error) {
	return _Bloom.Contract.UpdateCascade(&_Bloom.TransactOpts, newFilters, ks, bitLens)
}

// UpdateCascade is a paid mutator transaction binding the contract method 0xb163337d.
//
// Solidity: function updateCascade(bytes[] newFilters, uint256[] ks, uint256[] bitLens) returns()
func (_Bloom *BloomTransactorSession) UpdateCascade(newFilters [][]byte, ks []*big.Int, bitLens []*big.Int) (*types.Transaction, error) {
	return _Bloom.Contract.UpdateCascade(&_Bloom.TransactOpts, newFilters, ks, bitLens)
}
