// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package zkp

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ZkpMetaData contains all meta data concerning the Zkp contract.
var ZkpMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"ProofInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicInputNotInField\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"compressProof\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"compressed\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"compressedProof\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"input\",\"type\":\"uint256[4]\"}],\"name\":\"verifyCompressedProof\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[4]\",\"name\":\"input\",\"type\":\"uint256[4]\"}],\"name\":\"verifyProof\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080604052348015600f57600080fd5b506122f68061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063235725111461004657806344f6369214610062578063f2457c8d14610092575b600080fd5b610060600480360381019061005b919061207e565b6100ae565b005b61007c600480360381019061007791906120c0565b61034b565b60405161008991906121a3565b60405180910390f35b6100ac60048036038101906100a791906121be565b6104ac565b005b6000806100ba83610a71565b9150915060006040516101008682377f2ed54a4384a5a2e8f181ec80de0c607e69f0b5947a7bfc547647e5584ce951a26101008201527f0b504560860565d3245e3448547d48ef8bc206ca99edd51e82641a1d640819d56101208201527f17958e71ca99042f911e88e4ead68e66ee671bc8a7e3e7341f109ae4722793346101408201527f0233738f2d8ab5b42cb85882f9a72a451d481b45b635fa01636252f34c6e696f6101608201527f1d09476d1e72628ce343048ca641ae020c2d623b1eb8909c5c7dcf3f7c08c84c6101808201527f09b06f0f3cd9c80d7ad66e8d62697ce14fbbb05110853fbb654de1d291b803c56101a08201527f1da6940c74f905c716823bee03cf3f413153fbf76f868b6270f65b43b57632c06101c08201527f0b38558435d8f69aabcdf562ae357179b9ab8650b935833a8bd2c8973974d72d6101e08201527f20b83870b974ffe44497764281512cbcd6c57adb9b7ff01336051f1b6e41513e6102008201527f209ff4cd3fa5675497d40db34c5f094f404176a3285c86f2d43c385e4be123f361022082015283610240820152826102608201527f23478e871e0284b6f43389be6cb76c3d151a2f4cdb4bb758f2b125b836bd82626102808201527f292551e5b051e49d0f3b4cb723ad824c0ff712f1bf31f9db7184f1b212ab9e246102a08201527f11147830babb4e975008e2efc470dfaa7c1232ef79e7827849ec3ee56c2e187e6102c08201527f239fc1b1f7d36179ea046bd1c7476310140fec9b295a93a695162fc9068f98a76102e08201526020816103008360085afa91508051821691505080610344576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b610353611fc9565b61038d8260006008811061036a576103696121ff565b5b602002013583600160088110610383576103826121ff565b5b6020020135610d78565b816000600481106103a1576103a06121ff565b5b602002018181525050610416826003600881106103c1576103c06121ff565b5b6020020135836002600881106103da576103d96121ff565b5b6020020135846005600881106103f3576103f26121ff565b5b60200201358560046008811061040c5761040b6121ff565b5b6020020135610f2c565b8260026004811061042a576104296121ff565b5b6020020183600160048110610442576104416121ff565b5b602002018281525082815250505061048a82600660088110610467576104666121ff565b5b6020020135836007600881106104805761047f6121ff565b5b6020020135610d78565b8160036004811061049e5761049d6121ff565b5b602002018181525050919050565b6104b4611feb565b6000806104d8856000600481106104ce576104cd6121ff565b5b6020020135611503565b9150915060008060008061051c896002600481106104f9576104f86121ff565b5b60200201358a600160048110610512576105116121ff565b5b602002013561163c565b93509350935093506000806105488b60036004811061053e5761053d6121ff565b5b6020020135611503565b915091506000806105588c610a71565b91509150898b600060188110610571576105706121ff565b5b602002018181525050888b60016018811061058f5761058e6121ff565b5b602002018181525050868b6002601881106105ad576105ac6121ff565b5b602002018181525050878b6003601881106105cb576105ca6121ff565b5b602002018181525050848b6004601881106105e9576105e86121ff565b5b602002018181525050858b600560188110610607576106066121ff565b5b602002018181525050838b600660188110610625576106246121ff565b5b602002018181525050828b600760188110610643576106426121ff565b5b6020020181815250507f2ed54a4384a5a2e8f181ec80de0c607e69f0b5947a7bfc547647e5584ce951a28b600860188110610681576106806121ff565b5b6020020181815250507f0b504560860565d3245e3448547d48ef8bc206ca99edd51e82641a1d640819d58b6009601881106106bf576106be6121ff565b5b6020020181815250507f17958e71ca99042f911e88e4ead68e66ee671bc8a7e3e7341f109ae4722793348b600a601881106106fd576106fc6121ff565b5b6020020181815250507f0233738f2d8ab5b42cb85882f9a72a451d481b45b635fa01636252f34c6e696f8b600b6018811061073b5761073a6121ff565b5b6020020181815250507f1d09476d1e72628ce343048ca641ae020c2d623b1eb8909c5c7dcf3f7c08c84c8b600c60188110610779576107786121ff565b5b6020020181815250507f09b06f0f3cd9c80d7ad66e8d62697ce14fbbb05110853fbb654de1d291b803c58b600d601881106107b7576107b66121ff565b5b6020020181815250507f1da6940c74f905c716823bee03cf3f413153fbf76f868b6270f65b43b57632c08b600e601881106107f5576107f46121ff565b5b6020020181815250507f0b38558435d8f69aabcdf562ae357179b9ab8650b935833a8bd2c8973974d72d8b600f60188110610833576108326121ff565b5b6020020181815250507f20b83870b974ffe44497764281512cbcd6c57adb9b7ff01336051f1b6e41513e8b601060188110610871576108706121ff565b5b6020020181815250507f209ff4cd3fa5675497d40db34c5f094f404176a3285c86f2d43c385e4be123f38b6011601881106108af576108ae6121ff565b5b602002018181525050818b6012601881106108cd576108cc6121ff565b5b602002018181525050808b6013601881106108eb576108ea6121ff565b5b6020020181815250507f23478e871e0284b6f43389be6cb76c3d151a2f4cdb4bb758f2b125b836bd82628b601460188110610929576109286121ff565b5b6020020181815250507f292551e5b051e49d0f3b4cb723ad824c0ff712f1bf31f9db7184f1b212ab9e248b601560188110610967576109666121ff565b5b6020020181815250507f11147830babb4e975008e2efc470dfaa7c1232ef79e7827849ec3ee56c2e187e8b6016601881106109a5576109a46121ff565b5b6020020181815250507f239fc1b1f7d36179ea046bd1c7476310140fec9b295a93a695162fc9068f98a78b6017601881106109e3576109e26121ff565b5b60200201818152505060006109f661200e565b6020816103008f60085afa9150811580610a295750600181600060018110610a2157610a206121ff565b5b602002015114155b15610a60576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050505050505050505050565b6000806000600190506040516040810160007f02dba5e84fce4e9491489f3e94d10db913150c1325b161f15a657b88bceeed1383527f1d673e4f7c1894c91cfaea9d04dcae82e2a54d40513d0da393b59c9f2a2ebfe560208401527f1b570bcf6fa80b2bc168fb7927bbda90ca08a548df41d154045f7d6a112944e382527f187993bf3e586520145d36ba27e9d5aec115050b1b70aa67ae8aee712c8473f66020830152863590508060408301527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181108416935060408260608460075afa8416935060408360808560065afa841693507f2d589eb7bef54d6bd89eb4fdadc2353f026eb287e5938c921f10e80f2c1aba3b82527f0daaa3e0faf7d5fda23978ee19004068d74c5f3c259df92ea21365399f9994056020830152602087013590508060408301527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181108416935060408260608460075afa8416935060408360808560065afa841693507f1dfc95c25df01ae23a02277e741bf0a0dd13060995424ea7ec4d1831f1ffc99882527f047ae0f8c1137f60a3b8ea98e0179b97f6cc6f09fe2bd9e8a430e7287d2778a86020830152604087013590508060408301527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181108416935060408260608460075afa8416935060408360808560065afa841693507f1f806e0f825ab99ce7dffeb894d09af872e73e647023963879771a2497f1d88082527f0e8c8b3138218a8bf56d47215e2d870f5cbfd48662203d707a37131b80b17b4d6020830152606087013590508060408301527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181108416935060408260608460075afa8416935060408360808560065afa84169350825195506020830151945050505080610d72576040517fa54f8e2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50915091565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783101580610dc957507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478210155b15610e00576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083148015610e105750600082145b15610e1e5760009050610f26565b6000610ebd7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610e5257610e5161222e565b5b60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610e8357610e8261222e565b5b877f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610eb357610eb261222e565b5b898a090908611a22565b9050808303610ed6576000600185901b17915050610f26565b610edf81611abf565b8303610ef45760018085901b17915050610f26565b6040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4786101580610f7e57507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478510155b80610fa957507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478410155b80610fd457507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478310155b1561100b576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838587891717170361102557600080915091506114fa565b60008060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806110595761105861222e565b5b60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611086919061228c565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806110b5576110b461222e565b5b8a8c0909905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806110ec576110eb61222e565b5b8a7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061111c5761111b61222e565b5b8c8d0909905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806111535761115261222e565b5b8a7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806111835761118261222e565b5b8c8d090990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806111b8576111b761222e565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806111e7576111e661222e565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806112165761121561222e565b5b8c860984087f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e50894506112fb7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806112715761127061222e565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806112a05761129f61222e565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806112cf576112ce61222e565b5b8e870984087f2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e77508611abf565b935050505060008061139f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806113355761133461222e565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806113645761136361222e565b5b8586097f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806113965761139561222e565b5b87880908611a22565b905061142c7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806113d3576113d261222e565b5b7f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea47f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806114235761142261222e565b5b84880809611b2b565b1591505061143b838383611b96565b8093508194505050828714801561145157508186145b1561147b57600081611464576000611467565b60025b60ff1660028b901b171794508793506114f6565b61148483611abf565b87148015611499575061149682611abf565b86145b156114c3576001816114ac5760006114af565b60025b60ff1660028b901b171794508793506114f5565b6040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5050505b94509492505050565b6000806000830361151a5760008091509150611637565b60006001808516149050600184901c92507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478310611584576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6116217f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806115b6576115b561222e565b5b60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806115e7576115e661222e565b5b867f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806116175761161661222e565b5b8889090908611a22565b915080156116355761163282611abf565b91505b505b915091565b6000806000806000861480156116525750600085145b1561166a576000806000809350935093509350611a19565b6000600180881614905060006002808916149050600288901c95508694507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47861015806116d757507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478510155b1561170e576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061173f5761173e61222e565b5b60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761176c919061228c565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061179b5761179a61222e565b5b888a0909905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806117d2576117d161222e565b5b887f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806118025761180161222e565b5b8a8b0909905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806118395761183861222e565b5b887f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806118695761186861222e565b5b8a8b090990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061189e5761189d61222e565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806118cd576118cc61222e565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806118fc576118fb61222e565b5b8a860984087f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e50896506119e17f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806119575761195661222e565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806119865761198561222e565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806119b5576119b461222e565b5b8c870984087f2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e77508611abf565b95506119ee878786611b96565b80975081985050508415611a1357611a0587611abf565b9650611a1086611abf565b95505b50505050505b92959194509250565b6000611a4e827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52611e93565b9050817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611a8057611a7f61222e565b5b82830914611aba576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47808381611af257611af161222e565b5b067f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd470381611b2357611b2261222e565b5b069050919050565b600080611b58837f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52611e93565b9050827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611b8a57611b8961222e565b5b82830914915050919050565b6000806000611c377f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611bcd57611bcc61222e565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611bfc57611bfb61222e565b5b8788097f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611c2e57611c2d61222e565b5b898a0908611a22565b90508315611c4b57611c4881611abf565b90505b611cd67f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611c7d57611c7c61222e565b5b7f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea47f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611ccd57611ccc61222e565b5b848a0809611a22565b92507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611d0757611d0661222e565b5b611d427f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611d3957611d3861222e565b5b60028609611f2b565b860991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611d7557611d7461222e565b5b611daf7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611da757611da661222e565b5b848509611abf565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611dde57611ddd61222e565b5b8586090886141580611e5357507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611e1a57611e1961222e565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611e4957611e4861222e565b5b8385096002098514155b15611e8a576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50935093915050565b60008060405160208152602080820152602060408201528460608201528360808201527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760a082015260208160c08360055afa9150805192505080611f24576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5092915050565b6000611f57827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd45611e93565b905060017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611f8a57611f8961222e565b5b82840914611fc4576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b6040518060800160405280600490602082028036833780820191505090505090565b604051806103000160405280601890602082028036833780820191505090505090565b6040518060200160405280600190602082028036833780820191505090505090565b600080fd5b600080fd5b60008190508260206008028201111561205657612055612035565b5b92915050565b60008190508260206004028201111561207857612077612035565b5b92915050565b600080610180838503121561209657612095612030565b5b60006120a48582860161203a565b9250506101006120b68582860161205c565b9150509250929050565b600061010082840312156120d7576120d6612030565b5b60006120e58482850161203a565b91505092915050565b600060049050919050565b600081905092915050565b6000819050919050565b6000819050919050565b6121218161210e565b82525050565b60006121338383612118565b60208301905092915050565b6000602082019050919050565b612155816120ee565b61215f81846120f9565b925061216a82612104565b8060005b8381101561219b5781516121828782612127565b965061218d8361213f565b92505060018101905061216e565b505050505050565b60006080820190506121b8600083018461214c565b92915050565b60008061010083850312156121d6576121d5612030565b5b60006121e48582860161205c565b92505060806121f58582860161205c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006122978261210e565b91506122a28361210e565b92508282039050818111156122ba576122b961225d565b5b9291505056fea26469706673582212209db59620359a918928729c86825f8a03b1ff6474cc22527f19265821d829103c64736f6c634300081e0033",
}

// ZkpABI is the input ABI used to generate the binding from.
// Deprecated: Use ZkpMetaData.ABI instead.
var ZkpABI = ZkpMetaData.ABI

// ZkpBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ZkpMetaData.Bin instead.
var ZkpBin = ZkpMetaData.Bin

// DeployZkp deploys a new Ethereum contract, binding an instance of Zkp to it.
func DeployZkp(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Zkp, error) {
	parsed, err := ZkpMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ZkpBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Zkp{ZkpCaller: ZkpCaller{contract: contract}, ZkpTransactor: ZkpTransactor{contract: contract}, ZkpFilterer: ZkpFilterer{contract: contract}}, nil
}

// Zkp is an auto generated Go binding around an Ethereum contract.
type Zkp struct {
	ZkpCaller     // Read-only binding to the contract
	ZkpTransactor // Write-only binding to the contract
	ZkpFilterer   // Log filterer for contract events
}

// ZkpCaller is an auto generated read-only Go binding around an Ethereum contract.
type ZkpCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZkpTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ZkpTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZkpFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ZkpFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZkpSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ZkpSession struct {
	Contract     *Zkp              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZkpCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ZkpCallerSession struct {
	Contract *ZkpCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ZkpTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ZkpTransactorSession struct {
	Contract     *ZkpTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZkpRaw is an auto generated low-level Go binding around an Ethereum contract.
type ZkpRaw struct {
	Contract *Zkp // Generic contract binding to access the raw methods on
}

// ZkpCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ZkpCallerRaw struct {
	Contract *ZkpCaller // Generic read-only contract binding to access the raw methods on
}

// ZkpTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ZkpTransactorRaw struct {
	Contract *ZkpTransactor // Generic write-only contract binding to access the raw methods on
}

// NewZkp creates a new instance of Zkp, bound to a specific deployed contract.
func NewZkp(address common.Address, backend bind.ContractBackend) (*Zkp, error) {
	contract, err := bindZkp(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Zkp{ZkpCaller: ZkpCaller{contract: contract}, ZkpTransactor: ZkpTransactor{contract: contract}, ZkpFilterer: ZkpFilterer{contract: contract}}, nil
}

// NewZkpCaller creates a new read-only instance of Zkp, bound to a specific deployed contract.
func NewZkpCaller(address common.Address, caller bind.ContractCaller) (*ZkpCaller, error) {
	contract, err := bindZkp(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ZkpCaller{contract: contract}, nil
}

// NewZkpTransactor creates a new write-only instance of Zkp, bound to a specific deployed contract.
func NewZkpTransactor(address common.Address, transactor bind.ContractTransactor) (*ZkpTransactor, error) {
	contract, err := bindZkp(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ZkpTransactor{contract: contract}, nil
}

// NewZkpFilterer creates a new log filterer instance of Zkp, bound to a specific deployed contract.
func NewZkpFilterer(address common.Address, filterer bind.ContractFilterer) (*ZkpFilterer, error) {
	contract, err := bindZkp(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ZkpFilterer{contract: contract}, nil
}

// bindZkp binds a generic wrapper to an already deployed contract.
func bindZkp(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ZkpMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zkp *ZkpRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zkp.Contract.ZkpCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Zkp *ZkpRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zkp.Contract.ZkpTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Zkp *ZkpRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zkp.Contract.ZkpTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zkp *ZkpCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zkp.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Zkp *ZkpTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zkp.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Zkp *ZkpTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zkp.Contract.contract.Transact(opts, method, params...)
}

// CompressProof is a free data retrieval call binding the contract method 0x44f63692.
//
// Solidity: function compressProof(uint256[8] proof) view returns(uint256[4] compressed)
func (_Zkp *ZkpCaller) CompressProof(opts *bind.CallOpts, proof [8]*big.Int) ([4]*big.Int, error) {
	var out []interface{}
	err := _Zkp.contract.Call(opts, &out, "compressProof", proof)

	if err != nil {
		return *new([4]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([4]*big.Int)).(*[4]*big.Int)

	return out0, err

}

// CompressProof is a free data retrieval call binding the contract method 0x44f63692.
//
// Solidity: function compressProof(uint256[8] proof) view returns(uint256[4] compressed)
func (_Zkp *ZkpSession) CompressProof(proof [8]*big.Int) ([4]*big.Int, error) {
	return _Zkp.Contract.CompressProof(&_Zkp.CallOpts, proof)
}

// CompressProof is a free data retrieval call binding the contract method 0x44f63692.
//
// Solidity: function compressProof(uint256[8] proof) view returns(uint256[4] compressed)
func (_Zkp *ZkpCallerSession) CompressProof(proof [8]*big.Int) ([4]*big.Int, error) {
	return _Zkp.Contract.CompressProof(&_Zkp.CallOpts, proof)
}

// VerifyCompressedProof is a free data retrieval call binding the contract method 0xf2457c8d.
//
// Solidity: function verifyCompressedProof(uint256[4] compressedProof, uint256[4] input) view returns()
func (_Zkp *ZkpCaller) VerifyCompressedProof(opts *bind.CallOpts, compressedProof [4]*big.Int, input [4]*big.Int) error {
	var out []interface{}
	err := _Zkp.contract.Call(opts, &out, "verifyCompressedProof", compressedProof, input)

	if err != nil {
		return err
	}

	return err

}

// VerifyCompressedProof is a free data retrieval call binding the contract method 0xf2457c8d.
//
// Solidity: function verifyCompressedProof(uint256[4] compressedProof, uint256[4] input) view returns()
func (_Zkp *ZkpSession) VerifyCompressedProof(compressedProof [4]*big.Int, input [4]*big.Int) error {
	return _Zkp.Contract.VerifyCompressedProof(&_Zkp.CallOpts, compressedProof, input)
}

// VerifyCompressedProof is a free data retrieval call binding the contract method 0xf2457c8d.
//
// Solidity: function verifyCompressedProof(uint256[4] compressedProof, uint256[4] input) view returns()
func (_Zkp *ZkpCallerSession) VerifyCompressedProof(compressedProof [4]*big.Int, input [4]*big.Int) error {
	return _Zkp.Contract.VerifyCompressedProof(&_Zkp.CallOpts, compressedProof, input)
}

// VerifyProof is a free data retrieval call binding the contract method 0x23572511.
//
// Solidity: function verifyProof(uint256[8] proof, uint256[4] input) view returns()
func (_Zkp *ZkpCaller) VerifyProof(opts *bind.CallOpts, proof [8]*big.Int, input [4]*big.Int) error {
	var out []interface{}
	err := _Zkp.contract.Call(opts, &out, "verifyProof", proof, input)

	if err != nil {
		return err
	}

	return err

}

// VerifyProof is a free data retrieval call binding the contract method 0x23572511.
//
// Solidity: function verifyProof(uint256[8] proof, uint256[4] input) view returns()
func (_Zkp *ZkpSession) VerifyProof(proof [8]*big.Int, input [4]*big.Int) error {
	return _Zkp.Contract.VerifyProof(&_Zkp.CallOpts, proof, input)
}

// VerifyProof is a free data retrieval call binding the contract method 0x23572511.
//
// Solidity: function verifyProof(uint256[8] proof, uint256[4] input) view returns()
func (_Zkp *ZkpCallerSession) VerifyProof(proof [8]*big.Int, input [4]*big.Int) error {
	return _Zkp.Contract.VerifyProof(&_Zkp.CallOpts, proof, input)
}
