// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package verifier

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// VerifierMetaData contains all meta data concerning the Verifier contract.
var VerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bloom\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bloom\",\"outputs\":[{\"internalType\":\"contractCascadingBloomFilter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"checkCredential\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"errorCode\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"measureCheckCredentialGas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"errorCode\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"newFilters\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bitLens\",\"type\":\"uint256[]\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523461002f576100196100146100fa565b6101dd565b610021610034565b6133986101fe823961339890f35b61003a565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100699061003f565b810190811060018060401b0382111761008157604052565b610049565b90610099610092610034565b928361005f565b565b600080fd5b60018060a01b031690565b6100b4906100a0565b90565b6100c0816100ab565b036100c757565b600080fd5b905051906100d9826100b7565b565b906020828203126100f5576100f2916000016100cc565b90565b61009b565b6101186135968038038061010d81610086565b9283398101906100db565b90565b90565b61013261012d610137926100a0565b61011b565b6100a0565b90565b6101439061011e565b90565b61014f9061013a565b90565b60001b90565b9061016960018060a01b0391610152565b9181191691161790565b61017c9061013a565b90565b90565b9061019761019261019e92610173565b61017f565b8254610158565b9055565b6101ab9061011e565b90565b6101b7906101a2565b90565b90565b906101d26101cd6101d9926101ae565b6101ba565b8254610158565b9055565b6101e96101f091610146565b6000610182565b6101fb3360016101bd565b56fe60806040526004361015610013575b61052d565b61001e60003561006d565b80631d143848146100685780635f1c7a2114610063578063d26da14f1461005e578063e9b2cd3f146100595763eafa217e0361000e576104f0565b6104b6565b610376565b6102a0565b610112565b60e01c90565b60405190565b600080fd5b600080fd5b600091031261008e57565b61007e565b1c90565b60018060a01b031690565b6100b29060086100b79302610093565b610097565b90565b906100c591546100a2565b90565b6100d560016000906100ba565b90565b60018060a01b031690565b6100ec906100d8565b90565b6100f8906100e3565b9052565b9190610110906000602085019401906100ef565b565b3461014257610122366004610083565b61013e61012d6100c8565b610135610073565b918291826100fc565b0390f35b610079565b600080fd5b600080fd5b600080fd5b600080fd5b909182601f830112156101955781359167ffffffffffffffff831161019057602001926001830284011161018b57565b610156565b610151565b61014c565b90565b6101a68161019a565b036101ad57565b600080fd5b905035906101bf8261019d565b565b9160808383031261025257600083013567ffffffffffffffff811161024d57826101ec91850161015b565b929093602081013567ffffffffffffffff8111610248578261020f91830161015b565b929093604083013567ffffffffffffffff8111610243576102358361024092860161015b565b9390946060016101b2565b90565b610147565b610147565b610147565b61007e565b151590565b61026590610257565b9052565b60ff1690565b61027890610269565b9052565b91602061029e9294936102976040820196600083019061025c565b019061026f565b565b346102d8576102bf6102b33660046101c1565b9594909493919361053c565b906102d46102cb610073565b9283928361027c565b0390f35b610079565b60018060a01b031690565b6102f89060086102fd9302610093565b6102dd565b90565b9061030b91546102e8565b90565b610319600080610300565b90565b90565b61033361032e610338926100d8565b61031c565b6100d8565b90565b6103449061031f565b90565b6103509061033b565b90565b61035c90610347565b9052565b919061037490600060208501940190610353565b565b346103a657610386366004610083565b6103a261039161030e565b610399610073565b91829182610360565b0390f35b610079565b909182601f830112156103e55781359167ffffffffffffffff83116103e05760200192602083028401116103db57565b610156565b610151565b61014c565b909182601f830112156104245781359167ffffffffffffffff831161041f57602001926020830284011161041a57565b610156565b610151565b61014c565b906060828203126104ab57600082013567ffffffffffffffff81116104a657816104549184016103ab565b929093602082013567ffffffffffffffff81116104a157836104779184016103ea565b929093604082013567ffffffffffffffff811161049c5761049892016103ea565b9091565b610147565b610147565b610147565b61007e565b60000190565b346104eb576104d56104c9366004610429565b9493909392919261092a565b6104dd610073565b806104e7816104b0565b0390f35b610079565b346105285761050f6105033660046101c1565b95949094939193610f00565b9061052461051b610073565b9283928361027c565b0390f35b610079565b600080fd5b600090565b600090565b916105659694929593919561054f610532565b50610558610537565b5095909192939495610f00565b91909190565b60001c90565b61057d6105829161056b565b610097565b90565b61058f9054610571565b90565b60209181520190565b60007f4e6f742069737375657200000000000000000000000000000000000000000000910152565b6105d0600a602092610592565b6105d98161059b565b0190565b6105f390602081019060008183039101526105c3565b90565b156105fd57565b610605610073565b62461bcd60e51b81528061061b600482016105dd565b0390fd5b90610652959493929161064d3361064761064161063c6001610585565b6100e3565b916100e3565b146105f6565b61088a565b565b6106606106659161056b565b6102dd565b90565b6106729054610654565b90565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906106a49061067a565b810190811067ffffffffffffffff8211176106be57604052565b610684565b60e01b90565b60009103126106d457565b61007e565b60209181520190565b90565b60209181520190565b90826000939282370152565b91906107148161070d81610719956106e5565b80956106ee565b61067a565b0190565b9061072892916106fa565b90565b600080fd5b600080fd5b600080fd5b903560016020038236030381121561077b57016020813591019167ffffffffffffffff821161077657600182023603831361077157565b610730565b61072b565b610735565b60200190565b9181610791916106d9565b90816107a2602083028401946106e2565b92836000925b8484106107b85750505050505090565b90919293949560206107e46107de83856001950388526107d88b8861073a565b9061071d565b98610780565b9401940192949391906107a8565b60209181520190565b600080fd5b9037565b909182610810916107f2565b9160018060fb1b038111610833578291602061082f9202938491610800565b0190565b6107fb565b9492909361085a610876979561086894606089019189830360008b0152610786565b918683036020880152610804565b926040818503910152610804565b90565b610881610073565b3d6000823e3d90fd5b91949092936108a161089c6000610668565b610347565b9263b163337d90949695919295843b15610925576000966108d69488946108e1936108ca610073565b9b8c9a8b998a986106c3565b885260048801610838565b03925af18015610920576108f3575b50565b6109139060003d8111610919575b61090b818361069a565b8101906106c9565b386108f0565b503d610901565b610879565b610675565b90610938959493929161061f565b565b5090565b90565b61095561095061095a9261093e565b61031c565b61019a565b90565b90565b61097461096f6109799261095d565b61031c565b610269565b90565b600080fd5b9061099461098d610073565b928361069a565b565b67ffffffffffffffff81116109b4576109b060209161067a565b0190565b610684565b909291926109ce6109c982610996565b610981565b938185526020850190828401116109ea576109e8926106ee565b565b61097c565b6109fa9136916109b9565b90565b60200190565b5190565b634e487b7160e01b600052603260045260246000fd5b9190811015610a2d576001020190565b610a07565b90565b610a49610a44610a4e92610a32565b61031c565b61019a565b90565b60ff60f81b1690565b60f81c90565b610a74610a6f610a7992610269565b61031c565b610269565b90565b610a88610a8d91610a5a565b610a60565b90565b90565b610aa7610aa2610aac92610a90565b61031c565b61019a565b90565b90565b610ac6610ac1610acb92610aaf565b61031c565b61019a565b90565b600080fd5b600080fd5b90939293848311610af8578411610af3576001820201920390565b610ad3565b610ace565b90565b1b90565b90610b12610b19918361093a565b9135610afd565b9060208110610b27575b5090565b610b3a9060001990602003600802610b00565b1638610b23565b60001b90565b610b5090610afd565b9052565b610b8a610b9194610b80606094989795610b76608086019a6000870190610b47565b602085019061026f565b6040830190610b47565b0190610b47565b565b90565b610baa610ba5610baf92610b93565b61031c565b610269565b90565b90565b610bc9610bc4610bce92610bb2565b61031c565b61019a565b90565b90610be3610bde83610996565b610981565b918252565b369037565b90610c12610bfa83610bd1565b92602080610c088693610996565b9201910390610be8565b565b610c28610c23610c2d92610a90565b61031c565b610269565b90565b6001610c3c9101610269565b90565b610c53610c4e610c5892610bb2565b61031c565b610269565b90565b90565b610c72610c6d610c7792610c5b565b61031c565b61019a565b90565b610c8e610c89610c939261019a565b61031c565b610269565b90565b60f81b90565b610cb0610cab610cb592610269565b610c96565b610a51565b90565b90565b610ccf610cca610cd492610cb8565b61031c565b610269565b90565b634e487b7160e01b600052601160045260246000fd5b610cf9610cff91610269565b91610269565b90039060ff8211610d0c57565b610cd7565b90610d1b82610a03565b811015610d2d57600160209102010190565b610a07565b610d46610d41610d4b92610269565b61031c565b61019a565b90565b610d6d90610d67610d61610d7294610269565b9161019a565b90610093565b61019a565b90565b90565b610d8c610d87610d9192610d75565b61031c565b610269565b90565b50600490565b90610da482610d94565b811015610db2576020020190565b610a07565b610dc1905161019a565b90565b610dd8610dd3610ddd9261095d565b61031c565b61019a565b90565b90565b610def610df491610afd565b610de0565b9052565b610e0481602093610de3565b0190565b610e1181610257565b03610e1857565b600080fd5b90505190610e2a82610e08565b565b90505190610e398261019d565b565b9190604083820312610e645780610e58610e619260008601610e1d565b93602001610e2c565b90565b61007e565b60209181520190565b60005b838110610e86575050906000910152565b806020918301518185015201610e75565b610eb6610ebf602093610ec493610ead81610a03565b93848093610e69565b95869101610e72565b61067a565b0190565b610ede9160208201916000818403910152610e97565b90565b90565b610ef8610ef3610efd92610ee1565b61031c565b610269565b90565b929093959491610f0e610532565b50610f17610537565b50610f2381839061093a565b610f36610f306041610941565b9161019a565b0361125057602091600091610fef610f4f8789906109ef565b610f61610f5b82610a03565b916109fd565b2091610fdd610fd7610f8f610f8a610f848589610f7e6040610a35565b91610a1d565b35610a51565b610a7c565b95610fb9610fb385838b90610fad610fa78f93610a93565b92610ab2565b92610ad8565b90610b04565b93908990610fd1610fcb604093610ab2565b92610a35565b92610ad8565b90610b04565b90610fe6610073565b94859485610b54565b838052039060015afa1561124b57611008600051610b41565b61102361101d6110186001610585565b6100e3565b916100e3565b036112365761104061103b61104b94611046946109ef565b61137d565b946109ef565b61152c565b9261105e6110596008610bb5565b610bed565b919361106a6000610c14565b945b8561108061107a6008610c3f565b91610269565b10156110f0576110e4816110a96110a46110ea9461109e60ff610c5e565b16610c7a565b610c9c565b6110d3876110cd6110c38c6110be6007610cbb565b610ced565b9360001a93610d32565b90610d11565b536110de6008610c3f565b90610d4e565b95610c30565b9461106c565b50926111069194509161110c9290849091611712565b15610257565b61122557604061118d61115a8361115461114f61113e6111396111bb986111336000610a93565b90610d9a565b610db7565b926111496001610dc4565b90610d9a565b610db7565b9061195f565b6111b061116f61116a6000610668565b610347565b9161119c63d423db2a91611181610073565b95869160208301610df8565b6020820181038252038561069a565b6111a4610073565b958694859384936106c3565b835260048301610ec8565b03915afa908115611220576000916111f3575b506111e3576001906111e06000610c14565b90565b6000906111f06004610ee4565b90565b611214915060403d8111611219575b61120c818361069a565b810190610e3b565b6111ce565b503d611202565b610879565b506000906112336003610d78565b90565b50505050506000906112486002610b96565b90565b610879565b505050505050506000906112646001610960565b90565b67ffffffffffffffff811161127c5760200290565b610684565b61128d61129291611267565b610981565b90565b369037565b906112b86112a783611281565b926112b28491611267565b90611295565b565b6112c4600261129a565b90565b90565b6112de6112d96112e3926112c7565b61031c565b61019a565b90565b60007f4d616c666f726d656420636f6d7072657373656420454320706f696e74000000910152565b61131b601d602092610592565b611324816112e6565b0190565b61133e906020810190600081830391015261130e565b90565b1561134857565b611350610073565b62461bcd60e51b81528061136660048201611328565b0390fd5b600090565b906113799061019a565b9052565b6113856112ba565b506113ab61139282610a03565b6113a561139f60216112ca565b9161019a565b14611341565b6113b3610537565b506113bc61136a565b506113f56113d560216001840151930151928390611a4c565b6113ec6113e26002611281565b936000850161136f565b6020830161136f565b90565b67ffffffffffffffff811161140d5760200290565b610684565b61141e611423916113f8565b610981565b90565b9061144461143383611412565b9261143e84916113f8565b90611295565b565b6114506004611426565b90565b90565b61146a61146561146f92611453565b61031c565b61019a565b90565b60007f4d616c666f726d6564205652462070726f6f6600000000000000000000000000910152565b6114a76013602092610592565b6114b081611472565b0190565b6114ca906020810190600081830391015261149a565b90565b156114d457565b6114dc610073565b62461bcd60e51b8152806114f2600482016114b4565b0390fd5b600090565b6fffffffffffffffffffffffffffffffff1690565b61152461151f611529926114fb565b61031c565b61019a565b90565b602090611537611446565b5061155d61154482610a03565b6115576115516051611456565b9161019a565b146114cd565b611565610537565b5061156e61136a565b506115776114f6565b5061158061136a565b50016115e8815160001a6115df6115d66001850151946115d16115b16031602184015160801c930151958890611a4c565b6115c86115be6004611412565b9860008a0161136f565b6020880161136f565b611510565b6040850161136f565b6060830161136f565b90565b6115ff6115fa61160492610d75565b61031c565b61019a565b90565b90565b61161e61161961162392611607565b61031c565b61019a565b90565b61164f7f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179861160a565b90565b90565b61166961166461166e92611652565b61031c565b61019a565b90565b61169a7f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8611655565b90565b6116b16116ac6116b692610b93565b61031c565b61019a565b90565b50600290565b906116c9826116b9565b8110156116d7576020020190565b610a07565b60801c90565b6116f66116f16116fb926114fb565b61031c565b6114fb565b90565b61170a61170f916116dc565b6116e2565b90565b6118a96118a461189361188e6118ae946117c98761173d6118b4999a611736610532565b5084611bb3565b9290929361175d6117588461175260036115eb565b90610d9a565b610db7565b90611766611626565b61176e611671565b61178a6117858761177f600261169d565b90610d9a565b610db7565b916117c36117be6117ad6117a8876117a26000610a93565b906116bf565b610db7565b956117b86001610dc4565b906116bf565b610db7565b94611d4a565b906118476117e96117e4856117de60036115eb565b90610d9a565b610db7565b8587611807611802886117fc600261169d565b90610d9a565b610db7565b9061182461181f896118196000610a93565b90610d9a565b610db7565b9261184161183c8a6118366001610dc4565b90610d9a565b610db7565b94611d4a565b939093949561188461187f61186e611869856118636000610a93565b90610d9a565b610db7565b936118796001610dc4565b90610d9a565b610db7565b9293949596611ded565b6116fe565b9461189e600261169d565b90610d9a565b610db7565b61019a565b91611510565b1490565b600090565b90565b6118d46118cf6118d9926118bd565b61031c565b610269565b90565b6118e590610c96565b90565b6118f46118f991610269565b6118dc565b9052565b905090565b61192761191e9260209261191581610a03565b948580936118fd565b93849101610e72565b0190565b91611949600184611941611950979683966118e8565b0180926118e8565b0190611902565b90565b61195c91611902565b90565b6119c76000916119b66020946119736118b8565b506119a861199561198460fe6118c0565b9261198f6003610d78565b95611f42565b61199d610073565b94859389850161192b565b86820181038252038261069a565b6119be610073565b91829182611953565b039060025afa156119e0576119dd600051610b41565b90565b610879565b6119ef6000610a93565b90565b611a06611a01611a0b92610cb8565b61031c565b61019a565b90565b611a1860076119f2565b90565b90565b611a32611a2d611a3792611a1b565b61031c565b61019a565b90565b611a496401000003d019611a1e565b90565b90611a7a91611a5961136a565b5090611a636119e5565b611a6b611a0e565b91611a74611a3a565b936120b5565b90565b611aa692611a9f600183611a978295611aac9a99976118e8565b0180926118e8565b0190611902565b90611902565b90565b611ab890610269565b60ff8114611ac65760010190565b610cd7565b61ffff1690565b611ae6611ae1611aeb92610269565b61031c565b611acb565b90565b90565b611b05611b00611b0a92611aee565b61031c565b611acb565b90565b611b1d611b249160019493611902565b80926118e8565b0190565b611b3c611b37611b419261019a565b61031c565b61019a565b90565b611b50611b559161056b565b611b28565b90565b60007f4e6f2076616c696420706f696e742077617320666f756e640000000000000000910152565b611b8d6018602092610592565b611b9681611b58565b0190565b611bb09060208101906000818303910152611b80565b90565b90611c4790611bc061136a565b50611bc961136a565b50611c38611bd760fe6118c0565b91611c24611be56001610960565b95611c1e611c19611c08611c0384611bfd6000610a93565b906116bf565b610db7565b92611c136001610dc4565b906116bf565b610db7565b90611f42565b611c2c610073565b95869460208601611a7d565b6020820181038252038261069a565b611c516000610c14565b5b80611c67611c61610100611af1565b91611ad2565b1015611d285760206000611caf84611c9e8591611c90611c85610073565b938492888401611b0d565b86820181038252038261069a565b611ca6610073565b91829182611953565b039060025afa15611d2357611ccd611cc8600051610b41565b611b44565b611ce16002611cdc8391610b96565b611a4c565b90611d068183611cef6119e5565b611cf7611a0e565b91611d00611a3a565b936121dd565b611d1a575050611d1590611aaf565b611c52565b91509291509190565b610879565b611d30610073565b62461bcd60e51b815280611d4660048201611b9a565b0390fd5b611d9c95939491611d7f93611d7392611d6161136a565b50611d6a61136a565b5091909161233c565b9390939491909161233c565b919091909291611d8d6119e5565b92611d96611a3a565b94612372565b91909190565b600090565b611dea9695936001611dde94611dd18285611dc9611dd897611de49c996118e8565b0180926118e8565b0190611902565b90611902565b90611902565b90611902565b90565b9391600096611e589293611e4460209a611e3e611e779a611e38611e669a611e13611da2565b50611e32611e2160fe6118c0565b9b611e2c6002610b96565b9e611f42565b98611f42565b94611f42565b93611f42565b92611e4d610073565b9788968c8801611da7565b86820181038252038261069a565b611e6e610073565b91829182611953565b039060025afa15611ea4576000611e8e8151610b41565b611e96611da2565b506040519082820152015190565b610879565b606090565b634e487b7160e01b600052601260045260246000fd5b611ed0611ed69161019a565b9161019a565b908115611ee1570690565b611eae565b611ef5611efb9193929361019a565b9261019a565b8201809211611f0657565b610cd7565b90565b611f1a611f1f9161019a565b611f0b565b9052565b600181611f36611f3e93602096956118e8565b018092611f0e565b0190565b90611f7f611f7a611fa592611f55611ea9565b50611f75611f6f600292611f69600261169d565b90611ec4565b9161169d565b611ee6565b610c7a565b611f96611f8a610073565b93849260208401611f23565b6020820181038252038261069a565b90565b60207f6420454320706f696e7420707265666978000000000000000000000000000000917f456c6c697074696343757276653a696e6e76616c696420636f6d70726573736560008201520152565b6120036031604092610592565b61200c81611fa8565b0190565b6120269060208101906000818303910152611ff6565b90565b1561203057565b612038610073565b62461bcd60e51b81528061204e60048201612010565b0390fd5b61206661206161206b92610ee1565b61031c565b61019a565b90565b61207a6120809161019a565b9161019a565b90811561208b570490565b611eae565b61209f6120a59193929361019a565b9261019a565b82039182116120b057565b610cd7565b939290916120c161136a565b50846120d66120d06002610b96565b91610269565b1480156121bd575b6120e790612029565b828384869182156121b85709859182156121b357099290849182156121ae570990839182156121a95708829182156121a4576121759261216592612154920861214d61213d866121376001610dc4565b90611ee6565b6121476004612052565b9061206e565b859161245d565b9361215f8591610d32565b90611ee6565b61216f600261169d565b90611ec4565b6121886121826000610a93565b9161019a565b1460001461219557505b90565b9061219f91612090565b612192565b611eae565b611eae565b611eae565b611eae565b611eae565b506120e7856121d56121cf6003610d78565b91610269565b1490506120de565b92909391936121ea610532565b5060006121ff6121f98661019a565b91610a93565b148015612321575b8015612306575b80156122eb575b6122e15780839182156122dc5709928081849182156122d7570981849182156122d25709948061224e6122486000610a93565b9161019a565b036122a9575b50508061226a6122646000610a93565b9161019a565b03612289575b505061227f612285919261019a565b9161019a565b1490565b909192909180156122a4576122859261227f92089291612270565b611eae565b9091949190839182156122cd5709829182156122c85708923880612254565b611eae565b611eae565b611eae565b611eae565b611eae565b5050505050600090565b50806122ff6122f98561019a565b9161019a565b1015612215565b50600061231b6123158361019a565b91610a93565b1461220e565b508361233561232f8561019a565b9161019a565b1015612207565b9161236c9261234961136a565b5061235261136a565b50919061235d6119e5565b91612366611a3a565b9361254c565b91909190565b9093916123a495936123989161238661136a565b5061238f61136a565b50908591612593565b919490919293946125be565b91909190565b60007f456c6c697074696343757276653a206d6f64756c7573206973207a65726f0000910152565b6123df601e602092610592565b6123e8816123aa565b0190565b61240290602081019060008183039101526123d2565b90565b1561240c57565b612414610073565b62461bcd60e51b81528061242a600482016123ec565b0390fd5b90565b61244561244061244a9261242e565b61031c565b61019a565b90565b61245a600160ff1b612431565b90565b909161246761136a565b506124868161247f6124796000610a93565b9161019a565b1415612405565b8161249a6124946000610a93565b9161019a565b1461253c57826124b36124ad6000610a93565b9161019a565b1461252c5791906124c46001610dc4565b926124cd61244d565b925b600084116124de575050505090565b9091929382808080601094818a881615158a0a918009098160028a0487161515890a91800909816004890486161515880a91800909816008880485161515870a9180090994049291906124cf565b5050506125396001610dc4565b90565b5050506125496000610a93565b90565b9161258d94939161257f9361255f61136a565b5061256861136a565b509091600193926125798795610dc4565b926126c4565b9291909290929091926127e3565b91909190565b916125b66125bb9294936125a561136a565b506125ae61136a565b509482612090565b611ec4565b90565b92909493916125cb61136a565b506125d461136a565b506125df6000610a93565b506125ea6000610a93565b506125f56000610a93565b50836126096126038361019a565b9161019a565b1460001461268c5750849084918215612687570861263061262a6000610a93565b9161019a565b14600014612656575050505060009061265361264d600093610a93565b92610a93565b90565b61268193612672926001929161266c8694610dc4565b91612fdd565b92919290925b929091926127e3565b91909190565b611eae565b915093612681946126ba93919060019390916001906126b46126ae8997610dc4565b92610dc4565b946128cc565b9291929092612678565b94939291946126d161136a565b506126da61136a565b506126e361136a565b50806126f86126f26000610a93565b9161019a565b146127d55795906127096000610a93565b956127146000610a93565b9361271f6001610dc4565b985b8061273561272f6000610a93565b9161019a565b146127c457806127456001610dc4565b166127596127536000610a93565b9161019a565b03612796575b906127786127849392612772600261169d565b9061206e565b93919087918993612fdd565b97919794909792979197949094612721565b9761277895829a61278494936127b493929187908692938d956128cc565b9a9196909699919293505061275f565b505050509250929050919291929190565b509150939150919291929190565b9161280590949391946127f461136a565b506127fd61136a565b50829061325b565b91828383918215612843570990818391821561283e570994929082918215612839570990918215612834570990565b611eae565b611eae565b611eae565b611eae565b60007f557365206a6163446f75626c652066756e6374696f6e20696e73746561640000910152565b61287d601e602092610592565b61288681612848565b0190565b6128a09060208101906000818303910152612870565b90565b156128aa57565b6128b2610073565b62461bcd60e51b8152806128c86004820161288a565b0390fd5b9296949596939091936128dd61136a565b506128e661136a565b506128ef61136a565b50836129046128fe6000610a93565b9161019a565b1480612fc2575b612fb3578061292361291d6000610a93565b9161019a565b1480612f98575b612f8957612936611446565b9285868a908115612f845761295f920961295a866129546000610a93565b90610d9a565b61136f565b8561297c612977866129716000610a93565b90610d9a565b610db7565b8a908115612f7f576129a2920961299d866129976001610dc4565b90610d9a565b61136f565b87888a908115612f7a576129ca92096129c5866129bf600261169d565b90610d9a565b61136f565b876129e76129e2866129dc600261169d565b90610d9a565b610db7565b8a908115612f7557612a0d9209612a0886612a0260036115eb565b90610d9a565b61136f565b612a176004611412565b94612a34612a2f86612a29600261169d565b90610d9a565b610db7565b8a908115612f7057612a4a92096000870161136f565b612a66612a6185612a5b60036115eb565b90610d9a565b610db7565b89908115612f6b57612a7c92096020860161136f565b90612a99612a9484612a8e6000610a93565b90610d9a565b610db7565b9088928315612f6657612ace93612ac993612ab892096040870161136f565b92612ac36001610dc4565b90610d9a565b610db7565b86908115612f6157612ae492096060830161136f565b93612b01612afc86612af66000610a93565b90610d9a565b610db7565b612b2e612b28612b23612b1e89612b18600261169d565b90610d9a565b610db7565b61019a565b9161019a565b14158015612f0b575b612b40906128a3565b612b48611446565b93612b65612b6087612b5a600261169d565b90610d9a565b610db7565b612b8b83612b85612b808a612b7a6000610a93565b90610d9a565b610db7565b90612090565b83908115612f0657612bb19208612bac87612ba66000610a93565b90610d9a565b61136f565b612bcd612bc887612bc260036115eb565b90610d9a565b610db7565b612bf383612bed612be88a612be26001610dc4565b90610d9a565b610db7565b90612090565b83908115612f0157612c199208612c1487612c0e6001610dc4565b90610d9a565b61136f565b612c35612c3086612c2a6000610a93565b90610d9a565b610db7565b612c51612c4c87612c466000610a93565b90610d9a565b610db7565b83908115612efc57612c779209612c7287612c6c600261169d565b90610d9a565b61136f565b612c93612c8e86612c88600261169d565b90610d9a565b610db7565b612caf612caa87612ca46000610a93565b90610d9a565b610db7565b83908115612ef757612cd59209612cd087612cca60036115eb565b90610d9a565b61136f565b612cf1612cec86612ce66001610dc4565b90610d9a565b610db7565b612d0d612d0887612d026001610dc4565b90610d9a565b610db7565b83918215612ef25709612d3c83612d36612d3189612d2b60036115eb565b90610d9a565b610db7565b90612090565b83918215612eed570882600290612d65612d608a612d5a6000610a93565b90610d9a565b610db7565b612d81612d7c8a612d76600261169d565b90610d9a565b610db7565b86918215612ee8570985908115612ee357612d9e612da59461169d565b0990612090565b83918215612ede570895612dcb612dc687612dc06001610dc4565b90610d9a565b610db7565b612de7612de283612ddc6000610a93565b90610d9a565b610db7565b612e03612dfe89612df8600261169d565b90610d9a565b610db7565b85918215612ed95709612e17858a90612090565b85918215612ed4570884918215612ecf570990612e47612e428592612e3c6001610dc4565b90610d9a565b610db7565b90612e64612e5f89612e5960036115eb565b90610d9a565b610db7565b85908115612eca57612e77930990612090565b90838015612ec557612e9e92612e99920896612e936000610a93565b90610d9a565b610db7565b929082918215612ec0570990918215612ebb570992919291929190565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b50612b40612f2b612f2687612f206001610dc4565b90610d9a565b610db7565b612f58612f52612f4d612f488a612f4260036115eb565b90610d9a565b610db7565b61019a565b9161019a565b14159050612b37565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b50509350909350919291929190565b5081612fad612fa76000610a93565b9161019a565b1461292a565b93509495505050919291929190565b5082612fd7612fd16000610a93565b9161019a565b1461290b565b94929493909193612fec61136a565b50612ff561136a565b50612ffe61136a565b508461301361300d6000610a93565b9161019a565b146131955780818391821561319057099583848491821561318b570991868785918215613186570990600490848691821561318157098591821561317c5761305a90612052565b09976003908591821561317757613070906115eb565b099190808591821561317257098491821561316d5709839182156131685708958687849182156131635709838290838690811561315e576130b2930890612090565b84918215613159570896906130c8848990612090565b8491821561315457088391821561314f57099082600891808591821561314a570984908115613145576130fd61310494610bb5565b0990612090565b82918215613140570893600292908291821561313b5709909182156131365761312c9061169d565b0992919291929190565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b611eae565b9193945050919291929190565b60007f496e76616c6964206e756d626572000000000000000000000000000000000000910152565b6131d7600e602092610592565b6131e0816131a2565b0190565b6131fa90602081019060008183039101526131ca565b90565b1561320457565b61320c610073565b62461bcd60e51b815280613222600482016131e4565b0390fd5b61323561323b9193929361019a565b9261019a565b9161324783820261019a565b92818404149015171561325657565b610cd7565b61326361136a565b50806132786132726000610a93565b9161019a565b141580613347575b80613326575b61328f906131fd565b6132996000610a93565b6132a36001610dc4565b83906132ad61136a565b505b836132c36132bd6000610a93565b9161019a565b1461331e576132d382859061206e565b81939186829188908115613319576132ec930990612090565b918680156133145761330d9361330792089495809492613226565b90612090565b92916132af565b611eae565b611eae565b505091505090565b5061328f8261333e6133386000610a93565b9161019a565b14159050613286565b508061335b6133558461019a565b9161019a565b141561328056fea2646970667358221220f8ae57fe0a037b9e15209e6499b9385d2a5e6f17a3cbd890e5f41614852724fc64736f6c634300081e0033",
}

// VerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use VerifierMetaData.ABI instead.
var VerifierABI = VerifierMetaData.ABI

// VerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use VerifierMetaData.Bin instead.
var VerifierBin = VerifierMetaData.Bin

// DeployVerifier deploys a new Ethereum contract, binding an instance of Verifier to it.
func DeployVerifier(auth *bind.TransactOpts, backend bind.ContractBackend, _bloom common.Address) (common.Address, *types.Transaction, *Verifier, error) {
	parsed, err := VerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VerifierBin), backend, _bloom)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// Verifier is an auto generated Go binding around an Ethereum contract.
type Verifier struct {
	VerifierCaller     // Read-only binding to the contract
	VerifierTransactor // Write-only binding to the contract
	VerifierFilterer   // Log filterer for contract events
}

// VerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type VerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VerifierSession struct {
	Contract     *Verifier         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VerifierCallerSession struct {
	Contract *VerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// VerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VerifierTransactorSession struct {
	Contract     *VerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// VerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type VerifierRaw struct {
	Contract *Verifier // Generic contract binding to access the raw methods on
}

// VerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VerifierCallerRaw struct {
	Contract *VerifierCaller // Generic read-only contract binding to access the raw methods on
}

// VerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VerifierTransactorRaw struct {
	Contract *VerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVerifier creates a new instance of Verifier, bound to a specific deployed contract.
func NewVerifier(address common.Address, backend bind.ContractBackend) (*Verifier, error) {
	contract, err := bindVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// NewVerifierCaller creates a new read-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierCaller(address common.Address, caller bind.ContractCaller) (*VerifierCaller, error) {
	contract, err := bindVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierCaller{contract: contract}, nil
}

// NewVerifierTransactor creates a new write-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*VerifierTransactor, error) {
	contract, err := bindVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierTransactor{contract: contract}, nil
}

// NewVerifierFilterer creates a new log filterer instance of Verifier, bound to a specific deployed contract.
func NewVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*VerifierFilterer, error) {
	contract, err := bindVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VerifierFilterer{contract: contract}, nil
}

// bindVerifier binds a generic wrapper to an already deployed contract.
func bindVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := VerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.VerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transact(opts, method, params...)
}

// Bloom is a free data retrieval call binding the contract method 0xd26da14f.
//
// Solidity: function bloom() view returns(address)
func (_Verifier *VerifierCaller) Bloom(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "bloom")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bloom is a free data retrieval call binding the contract method 0xd26da14f.
//
// Solidity: function bloom() view returns(address)
func (_Verifier *VerifierSession) Bloom() (common.Address, error) {
	return _Verifier.Contract.Bloom(&_Verifier.CallOpts)
}

// Bloom is a free data retrieval call binding the contract method 0xd26da14f.
//
// Solidity: function bloom() view returns(address)
func (_Verifier *VerifierCallerSession) Bloom() (common.Address, error) {
	return _Verifier.Contract.Bloom(&_Verifier.CallOpts)
}

// CheckCredential is a free data retrieval call binding the contract method 0xeafa217e.
//
// Solidity: function checkCredential(bytes pubKey, bytes signature, bytes proof, uint256 epoch) view returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierCaller) CheckCredential(opts *bind.CallOpts, pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (struct {
	Valid     bool
	ErrorCode uint8
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "checkCredential", pubKey, signature, proof, epoch)

	outstruct := new(struct {
		Valid     bool
		ErrorCode uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Valid = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ErrorCode = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// CheckCredential is a free data retrieval call binding the contract method 0xeafa217e.
//
// Solidity: function checkCredential(bytes pubKey, bytes signature, bytes proof, uint256 epoch) view returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierSession) CheckCredential(pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (struct {
	Valid     bool
	ErrorCode uint8
}, error) {
	return _Verifier.Contract.CheckCredential(&_Verifier.CallOpts, pubKey, signature, proof, epoch)
}

// CheckCredential is a free data retrieval call binding the contract method 0xeafa217e.
//
// Solidity: function checkCredential(bytes pubKey, bytes signature, bytes proof, uint256 epoch) view returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierCallerSession) CheckCredential(pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (struct {
	Valid     bool
	ErrorCode uint8
}, error) {
	return _Verifier.Contract.CheckCredential(&_Verifier.CallOpts, pubKey, signature, proof, epoch)
}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() view returns(address)
func (_Verifier *VerifierCaller) Issuer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "issuer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() view returns(address)
func (_Verifier *VerifierSession) Issuer() (common.Address, error) {
	return _Verifier.Contract.Issuer(&_Verifier.CallOpts)
}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() view returns(address)
func (_Verifier *VerifierCallerSession) Issuer() (common.Address, error) {
	return _Verifier.Contract.Issuer(&_Verifier.CallOpts)
}

// MeasureCheckCredentialGas is a paid mutator transaction binding the contract method 0x5f1c7a21.
//
// Solidity: function measureCheckCredentialGas(bytes pubKey, bytes signature, bytes proof, uint256 epoch) returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierTransactor) MeasureCheckCredentialGas(opts *bind.TransactOpts, pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (*types.Transaction, error) {
	return _Verifier.contract.Transact(opts, "measureCheckCredentialGas", pubKey, signature, proof, epoch)
}

// MeasureCheckCredentialGas is a paid mutator transaction binding the contract method 0x5f1c7a21.
//
// Solidity: function measureCheckCredentialGas(bytes pubKey, bytes signature, bytes proof, uint256 epoch) returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierSession) MeasureCheckCredentialGas(pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.MeasureCheckCredentialGas(&_Verifier.TransactOpts, pubKey, signature, proof, epoch)
}

// MeasureCheckCredentialGas is a paid mutator transaction binding the contract method 0x5f1c7a21.
//
// Solidity: function measureCheckCredentialGas(bytes pubKey, bytes signature, bytes proof, uint256 epoch) returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierTransactorSession) MeasureCheckCredentialGas(pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.MeasureCheckCredentialGas(&_Verifier.TransactOpts, pubKey, signature, proof, epoch)
}

// Update is a paid mutator transaction binding the contract method 0xe9b2cd3f.
//
// Solidity: function update(bytes[] newFilters, uint256[] ks, uint256[] bitLens) returns()
func (_Verifier *VerifierTransactor) Update(opts *bind.TransactOpts, newFilters [][]byte, ks []*big.Int, bitLens []*big.Int) (*types.Transaction, error) {
	return _Verifier.contract.Transact(opts, "update", newFilters, ks, bitLens)
}

// Update is a paid mutator transaction binding the contract method 0xe9b2cd3f.
//
// Solidity: function update(bytes[] newFilters, uint256[] ks, uint256[] bitLens) returns()
func (_Verifier *VerifierSession) Update(newFilters [][]byte, ks []*big.Int, bitLens []*big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.Update(&_Verifier.TransactOpts, newFilters, ks, bitLens)
}

// Update is a paid mutator transaction binding the contract method 0xe9b2cd3f.
//
// Solidity: function update(bytes[] newFilters, uint256[] ks, uint256[] bitLens) returns()
func (_Verifier *VerifierTransactorSession) Update(newFilters [][]byte, ks []*big.Int, bitLens []*big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.Update(&_Verifier.TransactOpts, newFilters, ks, bitLens)
}
