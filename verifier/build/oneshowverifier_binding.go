// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package verifier

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// VerifierMetaData contains all meta data concerning the Verifier contract.
var VerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bloom\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bloom\",\"outputs\":[{\"internalType\":\"contractCascadingBloomFilter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"checkCredential\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"errorCode\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"uPoint\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"vComponents\",\"type\":\"uint256[4]\"}],\"name\":\"checkCredentialFast\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"errorCode\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getFastVerifyParams\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"uPoint\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"vComponents\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"uPoint\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"vComponents\",\"type\":\"uint256[4]\"}],\"name\":\"measureCheckCredentialFastGas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"errorCode\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"measureCheckCredentialGas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"errorCode\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"newFilters\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bitLens\",\"type\":\"uint256[]\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523461002f576100196100146100fa565b6101dd565b610021610034565b6144eb6101fe82396144eb90f35b61003a565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100699061003f565b810190811060018060401b0382111761008157604052565b610049565b90610099610092610034565b928361005f565b565b600080fd5b60018060a01b031690565b6100b4906100a0565b90565b6100c0816100ab565b036100c757565b600080fd5b905051906100d9826100b7565b565b906020828203126100f5576100f2916000016100cc565b90565b61009b565b6101186146e98038038061010d81610086565b9283398101906100db565b90565b90565b61013261012d610137926100a0565b61011b565b6100a0565b90565b6101439061011e565b90565b61014f9061013a565b90565b60001b90565b9061016960018060a01b0391610152565b9181191691161790565b61017c9061013a565b90565b90565b9061019761019261019e92610173565b61017f565b8254610158565b9055565b6101ab9061011e565b90565b6101b7906101a2565b90565b90565b906101d26101cd6101d9926101ae565b6101ba565b8254610158565b9055565b6101e96101f091610146565b6000610182565b6101fb3360016101bd565b56fe60806040526004361015610013575b610863565b61001e60003561009d565b80631d143848146100985780635f1c7a211461009357806379c3faf91461008e57806383a5cc32146100895780639e93651e14610084578063d26da14f1461007f578063e9b2cd3f1461007a5763eafa217e0361000e57610826565b6107ec565b6106ac565b6105d3565b610593565b61047c565b6102d0565b610142565b60e01c90565b60405190565b600080fd5b600080fd5b60009103126100be57565b6100ae565b1c90565b60018060a01b031690565b6100e29060086100e793026100c3565b6100c7565b90565b906100f591546100d2565b90565b61010560016000906100ea565b90565b60018060a01b031690565b61011c90610108565b90565b61012890610113565b9052565b91906101409060006020850194019061011f565b565b34610172576101523660046100b3565b61016e61015d6100f8565b6101656100a3565b9182918261012c565b0390f35b6100a9565b600080fd5b600080fd5b600080fd5b600080fd5b909182601f830112156101c55781359167ffffffffffffffff83116101c05760200192600183028401116101bb57565b610186565b610181565b61017c565b90565b6101d6816101ca565b036101dd57565b600080fd5b905035906101ef826101cd565b565b9160808383031261028257600083013567ffffffffffffffff811161027d578261021c91850161018b565b929093602081013567ffffffffffffffff8111610278578261023f91830161018b565b929093604083013567ffffffffffffffff8111610273576102658361027092860161018b565b9390946060016101e2565b90565b610177565b610177565b610177565b6100ae565b151590565b61029590610287565b9052565b60ff1690565b6102a890610299565b9052565b9160206102ce9294936102c76040820196600083019061028c565b019061029f565b565b34610308576102ef6102e33660046101f1565b95949094939193610872565b906103046102fb6100a3565b928392836102ac565b0390f35b6100a9565b60608183031261037557600081013567ffffffffffffffff8111610370578261033791830161018b565b929093602083013567ffffffffffffffff811161036b5761035d8361036892860161018b565b9390946040016101e2565b90565b610177565b610177565b6100ae565b50600290565b905090565b90565b610391906101ca565b9052565b906103a281602093610388565b0190565b60200190565b6103c86103c26103bb8361037a565b8094610380565b91610385565b6000915b8383106103d95750505050565b6103ef6103e96001928451610395565b926103a6565b920191906103cc565b50600490565b905090565b90565b60200190565b61042861042261041b836103f8565b80946103fe565b91610403565b6000915b8383106104395750505050565b61044f6104496001928451610395565b92610406565b9201919061042c565b91604061047a92949361047360c082019660008301906103ac565b019061040c565b565b346104b15761049861048f36600461030d565b93929092610c1b565b906104ad6104a46100a3565b92839283610458565b0390f35b6100a9565b919060206002028301116104c657565b610186565b919060206004028301116104db57565b610186565b906101408282031261058e57600082013567ffffffffffffffff8111610589578161050c91840161018b565b929093602082013567ffffffffffffffff8111610584578361052f91840161018b565b929093604082013567ffffffffffffffff811161057f578161055291840161018b565b92909361057c61056584606085016101e2565b9361057381608086016104b6565b9360c0016104cb565b90565b610177565b610177565b610177565b6100ae565b346105ce576105b56105a63660046104e0565b9796909695919594929461118c565b906105ca6105c16100a3565b928392836102ac565b0390f35b6100a9565b3461060e576105f56105e63660046104e0565b97969096959195949294611513565b9061060a6106016100a3565b928392836102ac565b0390f35b6100a9565b60018060a01b031690565b61062e90600861063393026100c3565b610613565b90565b90610641915461061e565b90565b61064f600080610636565b90565b90565b61066961066461066e92610108565b610652565b610108565b90565b61067a90610655565b90565b61068690610671565b90565b6106929061067d565b9052565b91906106aa90600060208501940190610689565b565b346106dc576106bc3660046100b3565b6106d86106c7610644565b6106cf6100a3565b91829182610696565b0390f35b6100a9565b909182601f8301121561071b5781359167ffffffffffffffff831161071657602001926020830284011161071157565b610186565b610181565b61017c565b909182601f8301121561075a5781359167ffffffffffffffff831161075557602001926020830284011161075057565b610186565b610181565b61017c565b906060828203126107e157600082013567ffffffffffffffff81116107dc578161078a9184016106e1565b929093602082013567ffffffffffffffff81116107d757836107ad918401610720565b929093604082013567ffffffffffffffff81116107d2576107ce9201610720565b9091565b610177565b610177565b610177565b6100ae565b60000190565b346108215761080b6107ff36600461075f565b9493909392919261184c565b6108136100a3565b8061081d816107e6565b0390f35b6100a9565b3461085e576108456108393660046101f1565b9594909493919361185c565b9061085a6108516100a3565b928392836102ac565b0390f35b6100a9565b600080fd5b600090565b600090565b9161089b96949295939195610885610868565b5061088e61086d565b509590919293949561185c565b91909190565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906108cb906108a1565b810190811067ffffffffffffffff8211176108e557604052565b6108ab565b906108fd6108f66100a3565b92836108c1565b565b67ffffffffffffffff81116109145760200290565b6108ab565b61092561092a916108ff565b6108ea565b90565b369037565b9061095061093f83610919565b9261094a84916108ff565b9061092d565b565b61095c6002610932565b90565b67ffffffffffffffff81116109745760200290565b6108ab565b61098561098a9161095f565b6108ea565b90565b906109ab61099a83610979565b926109a5849161095f565b9061092d565b565b6109b7600461098d565b90565b600080fd5b67ffffffffffffffff81116109dd576109d96020916108a1565b0190565b6108ab565b90826000939282370152565b90929192610a036109fe826109bf565b6108ea565b93818552602085019082840111610a1f57610a1d926109e2565b565b6109ba565b610a2f9136916109ee565b90565b90565b610a49610a44610a4e92610a32565b610652565b6101ca565b90565b90610a63610a5e836109bf565b6108ea565b918252565b369037565b90610a92610a7a83610a51565b92602080610a8886936109bf565b9201910390610a68565b565b90565b610aab610aa6610ab092610a94565b610652565b610299565b90565b6001610abf9101610299565b90565b610ad6610ad1610adb92610a32565b610652565b610299565b90565b90565b610af5610af0610afa92610ade565b610652565b6101ca565b90565b610b11610b0c610b16926101ca565b610652565b610299565b90565b60ff60f81b1690565b60f81b90565b610b3c610b37610b4192610299565b610b22565b610b19565b90565b90565b610b5b610b56610b6092610b44565b610652565b610299565b90565b634e487b7160e01b600052601160045260246000fd5b610b85610b8b91610299565b91610299565b90039060ff8211610b9857565b610b63565b634e487b7160e01b600052603260045260246000fd5b5190565b90610bc182610bb3565b811015610bd357600160209102010190565b610b9d565b610bec610be7610bf192610299565b610652565b6101ca565b90565b610c1390610c0d610c07610c1894610299565b916101ca565b906100c3565b6101ca565b90565b92610c48610c43610c4e93610c53959796610c34610952565b50610c3d6109ad565b50610a24565b611c79565b94610a24565b611dcd565b90610c66610c616008610a35565b610a6d565b9091610c726000610a97565b925b83610c88610c826008610ac2565b91610299565b1015610cf957610ced81610cb1610cac610cf394610ca660ff610ae1565b16610afd565b610b28565b610cdc86610cd6610ccc6007610cc78c91610b47565b610b79565b9360001a93610bd8565b90610bb7565b53610ce76008610ac2565b90610bf4565b93610ab3565b92610c74565b509150610d0892919091611f77565b91909190565b5090565b90565b610d29610d24610d2e92610d12565b610652565b6101ca565b90565b90565b610d48610d43610d4d92610d31565b610652565b610299565b90565b60200190565b9190811015610d66576001020190565b610b9d565b90565b610d82610d7d610d8792610d6b565b610652565b6101ca565b90565b60f81c90565b610da4610d9f610da992610299565b610652565b610299565b90565b610db8610dbd91610d8a565b610d90565b90565b610dd4610dcf610dd992610a94565b610652565b6101ca565b90565b90565b610df3610dee610df892610ddc565b610652565b6101ca565b90565b600080fd5b600080fd5b90939293848311610e25578411610e20576001820201920390565b610e00565b610dfb565b90565b1b90565b90610e3f610e469183610d0e565b9135610e2a565b9060208110610e54575b5090565b610e679060001990602003600802610e2d565b1638610e50565b60001b90565b610e7d90610e2a565b9052565b610eb7610ebe94610ead606094989795610ea3608086019a6000870190610e74565b602085019061029f565b6040830190610e74565b0190610e74565b565b610ec86100a3565b3d6000823e3d90fd5b60001c90565b610ee3610ee891610ed1565b6100c7565b90565b610ef59054610ed7565b90565b90565b610f0f610f0a610f1492610ef8565b610652565b610299565b90565b90929192610f2c610f27826108ff565b6108ea565b936020859202830192818411610f6457915b838310610f4b5750505050565b60208091610f5984866101e2565b815201920191610f3e565b610186565b610f769060023691610f17565b90565b90929192610f8e610f898261095f565b6108ea565b936020859202830192818411610fc657915b838310610fad5750505050565b60208091610fbb84866101e2565b815201920191610fa0565b610186565b610fd89060043691610f79565b90565b90565b610ff2610fed610ff792610fdb565b610652565b610299565b90565b90611004826103f8565b811015611012576020020190565b610b9d565b61102190516101ca565b90565b61103861103361103d92610d31565b610652565b6101ca565b90565b61104c61105191610ed1565b610613565b90565b61105e9054611040565b90565b90565b61107061107591610e2a565b611061565b9052565b61108581602093611064565b0190565b600080fd5b60e01b90565b61109d81610287565b036110a457565b600080fd5b905051906110b682611094565b565b905051906110c5826101cd565b565b91906040838203126110f057806110e46110ed92600086016110a9565b936020016110b8565b90565b6100ae565b60209181520190565b60005b838110611112575050906000910152565b806020918301518185015201611101565b61114261114b6020936111509361113981610bb3565b938480936110f5565b958691016110fe565b6108a1565b0190565b61116a9160208201916000818403910152611123565b90565b90565b61118461117f6111899261116d565b610652565b610299565b90565b9198959698979493979290926111a0610868565b506111a961086d565b506111b5818390610d0e565b6111c86111c26041610d15565b916101ca565b036114f9576020916000916112816111e1868890610a24565b6111f36111ed82610bb3565b91610d50565b209161126f61126961122161121c61121685896112106040610d6e565b91610d56565b35610b19565b610dac565b9561124b61124585838b9061123f6112398f93610dc0565b92610ddf565b92610e05565b90610e31565b9390899061126361125d604093610ddf565b92610d6e565b92610e05565b90610e31565b906112786100a3565b94859485610e81565b838052039060015afa156114f45761129a600051610e6e565b6112b56112af6112aa6001610eeb565b610113565b91610113565b036114dc57916112d36112ce6112d9936112de95610a24565b611c79565b96610a24565b611dcd565b906112f16112ec6008610a35565b610a6d565b93956112fd6000610a97565b965b8761131361130d6008610ac2565b91610299565b1015611384576113788161133c61133761137e9461133160ff610ae1565b16610afd565b610b28565b6113678b6113616113578c926113526007610b47565b610b79565b9360001a93610bd8565b90610bb7565b536113726008610ac2565b90610bf4565b97610ab3565b966112ff565b506113ac9396506113b2949295926113a66113a0889293610f69565b93610fcb565b9361218d565b15610287565b6114cb576040611433611400836113fa6113f56113e46113df611461986113d96000610dc0565b90610ffa565b611017565b926113ef6001611024565b90610ffa565b611017565b90612588565b6114566114156114106000611054565b61067d565b9161144263d423db2a916114276100a3565b95869160208301611079565b602082018103825203856108c1565b61144a6100a3565b9586948593849361108e565b835260048301611154565b03915afa9081156114c657600091611499575b50611489576001906114866000610a97565b90565b6000906114966004611170565b90565b6114ba915060403d81116114bf575b6114b281836108c1565b8101906110c7565b611474565b503d6114a8565b610ec0565b506000906114d96003610fde565b90565b50505050925050506000906114f16002610efb565b90565b610ec0565b505050505050925050506000906115106001610d34565b90565b91611540989694929795939197611528610868565b5061153161086d565b5097909192939495969761118c565b91909190565b60209181520190565b60007f4e6f742069737375657200000000000000000000000000000000000000000000910152565b611584600a602092611546565b61158d8161154f565b0190565b6115a79060208101906000818303910152611577565b90565b156115b157565b6115b96100a3565b62461bcd60e51b8152806115cf60048201611591565b0390fd5b906116069594939291611601336115fb6115f56115f06001610eeb565b610113565b91610113565b146115aa565b6117ac565b565b600091031261161357565b6100ae565b60209181520190565b90565b60209181520190565b9190611647816116408161164c95611624565b80956109e2565b6108a1565b0190565b9061165b929161162d565b90565b600080fd5b600080fd5b600080fd5b90356001602003823603038112156116ae57016020813591019167ffffffffffffffff82116116a95760018202360383136116a457565b611663565b61165e565b611668565b60200190565b91816116c491611618565b90816116d560208302840194611621565b92836000925b8484106116eb5750505050505090565b9091929394956020611717611711838560019503885261170b8b8861166d565b90611650565b986116b3565b9401940192949391906116db565b60209181520190565b600080fd5b9037565b90918261174391611725565b9160018060fb1b03811161176657829160206117629202938491611733565b0190565b61172e565b9492909361178d6117a9979561179b94606089019189830360008b01526116b9565b918683036020880152611737565b926040818503910152611737565b90565b91949092936117c36117be6000611054565b61067d565b9263b163337d90949695919295843b15611847576000966117f8948894611803936117ec6100a3565b9b8c9a8b998a9861108e565b88526004880161176b565b03925af1801561184257611815575b50565b6118359060003d811161183b575b61182d81836108c1565b810190611608565b38611812565b503d611823565b610ec0565b611089565b9061185a95949392916115d3565b565b92909395949161186a610868565b5061187361086d565b5061187f818390610d0e565b61189261188c6041610d15565b916101ca565b03611bac5760209160009161194b6118ab878990610a24565b6118bd6118b782610bb3565b91610d50565b20916119396119336118eb6118e66118e085896118da6040610d6e565b91610d56565b35610b19565b610dac565b9561191561190f85838b906119096119038f93610dc0565b92610ddf565b92610e05565b90610e31565b9390899061192d611927604093610ddf565b92610d6e565b92610e05565b90610e31565b906119426100a3565b94859485610e81565b838052039060015afa15611ba757611964600051610e6e565b61197f6119796119746001610eeb565b610113565b91610113565b03611b925761199c6119976119a7946119a294610a24565b611c79565b94610a24565b611dcd565b926119ba6119b56008610a35565b610a6d565b91936119c66000610a97565b945b856119dc6119d66008610ac2565b91610299565b1015611a4c57611a4081611a05611a00611a46946119fa60ff610ae1565b16610afd565b610b28565b611a2f87611a29611a1f8c611a1a6007610b47565b610b79565b9360001a93610bd8565b90610bb7565b53611a3a6008610ac2565b90610bf4565b95610ab3565b946119c8565b5092611a6291945091611a68929084909161260e565b15610287565b611b81576040611ae9611ab683611ab0611aab611a9a611a95611b1798611a8f6000610dc0565b90610ffa565b611017565b92611aa56001611024565b90610ffa565b611017565b90612588565b611b0c611acb611ac66000611054565b61067d565b91611af863d423db2a91611add6100a3565b95869160208301611079565b602082018103825203856108c1565b611b006100a3565b9586948593849361108e565b835260048301611154565b03915afa908115611b7c57600091611b4f575b50611b3f57600190611b3c6000610a97565b90565b600090611b4c6004611170565b90565b611b70915060403d8111611b75575b611b6881836108c1565b8101906110c7565b611b2a565b503d611b5e565b610ec0565b50600090611b8f6003610fde565b90565b5050505050600090611ba46002610efb565b90565b610ec0565b50505050505050600090611bc06001610d34565b90565b90565b611bda611bd5611bdf92611bc3565b610652565b6101ca565b90565b60007f4d616c666f726d656420636f6d7072657373656420454320706f696e74000000910152565b611c17601d602092611546565b611c2081611be2565b0190565b611c3a9060208101906000818303910152611c0a565b90565b15611c4457565b611c4c6100a3565b62461bcd60e51b815280611c6260048201611c24565b0390fd5b600090565b90611c75906101ca565b9052565b611c81610952565b50611ca7611c8e82610bb3565b611ca1611c9b6021611bc6565b916101ca565b14611c3d565b611caf61086d565b50611cb8611c66565b50611cf1611cd1602160018401519301519283906127dd565b611ce8611cde6002610919565b9360008501611c6b565b60208301611c6b565b90565b90565b611d0b611d06611d1092611cf4565b610652565b6101ca565b90565b60007f4d616c666f726d6564205652462070726f6f6600000000000000000000000000910152565b611d486013602092611546565b611d5181611d13565b0190565b611d6b9060208101906000818303910152611d3b565b90565b15611d7557565b611d7d6100a3565b62461bcd60e51b815280611d9360048201611d55565b0390fd5b600090565b6fffffffffffffffffffffffffffffffff1690565b611dc5611dc0611dca92611d9c565b610652565b6101ca565b90565b602090611dd86109ad565b50611dfe611de582610bb3565b611df8611df26051611cf7565b916101ca565b14611d6e565b611e0661086d565b50611e0f611c66565b50611e18611d97565b50611e21611c66565b5001611e89815160001a611e80611e77600185015194611e72611e526031602184015160801c9301519588906127dd565b611e69611e5f6004610979565b9860008a01611c6b565b60208801611c6b565b611db1565b60408501611c6b565b60608301611c6b565b90565b611ea0611e9b611ea592610fdb565b610652565b6101ca565b90565b90565b611ebf611eba611ec492611ea8565b610652565b6101ca565b90565b611ef07f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798611eab565b90565b90565b611f0a611f05611f0f92611ef3565b610652565b6101ca565b90565b611f3b7f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8611ef6565b90565b611f52611f4d611f5792610ef8565b610652565b6101ca565b90565b90611f648261037a565b811015611f72576020020190565b610b9d565b6121169061210d6120e3612104612038612060611fab6120bf989a99611f9b610952565b50611fa46109ad565b5087612944565b92909296611fcb611fc68d611fc06003611e8c565b90610ffa565b611017565b90611fd4611ec7565b8d611ff9611ff4611fe3611f12565b92611fee6002611f3e565b90610ffa565b611017565b9161203261202d61201c612017876120116000610dc0565b90611f5a565b611017565b956120276001611024565b90611f5a565b611017565b94612adb565b929092966120586120538d61204d6003611e8c565b90610ffa565b611017565b919091612b33565b9790979961208061207b826120756002611f3e565b90610ffa565b611017565b906120b96120b46120a361209e846120986000610dc0565b90610ffa565b611017565b926120ae6001611024565b90610ffa565b611017565b91612b33565b939093956120da6120d06002610919565b9360008501611c6b565b60208301611c6b565b976120fb6120f16004610979565b9760008901611c6b565b60208701611c6b565b60408501611c6b565b60608301611c6b565b90565b6121236000610dc0565b90565b90565b61213d61213861214292612126565b610652565b6101ca565b90565b6121546401000003d019612129565b90565b60801c90565b61217161216c61217692611d9c565b610652565b611d9c565b90565b61218561218a91612157565b61215d565b90565b9093916122656121a961225f926121a2610868565b5084612944565b929092936121c96121c4896121be6003611e8c565b90610ffa565b611017565b906121e66121e18a6121db6002611f3e565b90610ffa565b611017565b9061221f61221a612209612204846121fe6000610dc0565b90611f5a565b611017565b926122146001611024565b90611f5a565b611017565b9061223c6122378b6122316000610dc0565b90611f5a565b611017565b926122596122548c61224e6001611024565b90611f5a565b611017565b94612c5d565b15610287565b8015612472575b80156123cd575b6123c35761239e6123996123b4936123af936123bf9761231a886122ac6122a76123b99b6122a16000610dc0565b90610ffa565b611017565b906122c96122c4826122be6001611024565b90610ffa565b611017565b906123026122fd6122ec6122e7846122e16002611f3e565b90610ffa565b611017565b926122f76003611e8c565b90610ffa565b611017565b9061230b612119565b92612314612145565b94612ee7565b91909192938b61235861235361234261233d846123376000610dc0565b90610ffa565b611017565b9261234d6001611024565b90610ffa565b611017565b9161239161238c61237b612376876123706000610dc0565b90611f5a565b611017565b956123866001611024565b90611f5a565b611017565b949596612f6a565b612179565b946123a96002611f3e565b90610ffa565b611017565b6101ca565b91611db1565b1490565b5050505050600090565b5061246d6124676123f06123eb886123e56002611f3e565b90610ffa565b611017565b61240c612407896124016000610dc0565b90610ffa565b611017565b6124286124238a61241d6001611024565b90610ffa565b611017565b61244461243f896124396002611f3e565b90610ffa565b611017565b9161246161245c8a6124566003611e8c565b90610ffa565b611017565b93612e09565b15610287565b612273565b506124dc6124d66124956124908861248a6003611e8c565b90610ffa565b611017565b83856124b36124ae896124a86000610dc0565b90610ffa565b611017565b916124d06124cb8a6124c56001611024565b90610ffa565b611017565b93612e09565b15610287565b61226c565b600090565b90565b6124fd6124f8612502926124e6565b610652565b610299565b90565b61250e90610b22565b90565b61251d61252291610299565b612505565b9052565b905090565b6125506125479260209261253e81610bb3565b94858093612526565b938491016110fe565b0190565b9161257260018461256a61257997968396612511565b018092612511565b019061252b565b90565b6125859161252b565b90565b6125f06000916125df60209461259c6124e1565b506125d16125be6125ad60fe6124e9565b926125b86003610fde565b95613087565b6125c66100a3565b948593898501612554565b8682018103825203826108c1565b6125e76100a3565b9182918261257c565b039060025afa1561260957612606600051610e6e565b90565b610ec0565b6127a56127a061278f61278a6127aa946126c5876126396127b0999a612632610868565b5084612944565b929092936126596126548461264e6003611e8c565b90610ffa565b611017565b90612662611ec7565b61266a611f12565b6126866126818761267b6002611f3e565b90610ffa565b611017565b916126bf6126ba6126a96126a48761269e6000610dc0565b90611f5a565b611017565b956126b46001611024565b90611f5a565b611017565b94612adb565b906127436126e56126e0856126da6003611e8c565b90610ffa565b611017565b85876127036126fe886126f86002611f3e565b90610ffa565b611017565b9061272061271b896127156000610dc0565b90610ffa565b611017565b9261273d6127388a6127326001611024565b90610ffa565b611017565b94612adb565b939093949561278061277b61276a6127658561275f6000610dc0565b90610ffa565b611017565b936127756001611024565b90610ffa565b611017565b9293949596612f6a565b612179565b9461279a6002611f3e565b90610ffa565b611017565b6101ca565b91611db1565b1490565b6127c86127c36127cd92610b44565b610652565b6101ca565b90565b6127da60076127b4565b90565b9061280b916127ea611c66565b50906127f4612119565b6127fc6127d0565b91612805612145565b936131d5565b90565b61283792612830600183612828829561283d9a9997612511565b018092612511565b019061252b565b9061252b565b90565b61284990610299565b60ff81146128575760010190565b610b63565b61ffff1690565b61287761287261287c92610299565b610652565b61285c565b90565b90565b61289661289161289b9261287f565b610652565b61285c565b90565b6128ae6128b5916001949361252b565b8092612511565b0190565b6128cd6128c86128d2926101ca565b610652565b6101ca565b90565b6128e16128e691610ed1565b6128b9565b90565b60007f4e6f2076616c696420706f696e742077617320666f756e640000000000000000910152565b61291e6018602092611546565b612927816128e9565b0190565b6129419060208101906000818303910152612911565b90565b906129d890612951611c66565b5061295a611c66565b506129c961296860fe6124e9565b916129b56129766001610d34565b956129af6129aa6129996129948461298e6000610dc0565b90611f5a565b611017565b926129a46001611024565b90611f5a565b611017565b90613087565b6129bd6100a3565b9586946020860161280e565b602082018103825203826108c1565b6129e26000610a97565b5b806129f86129f2610100612882565b91612863565b1015612ab95760206000612a4084612a2f8591612a21612a166100a3565b93849288840161289e565b8682018103825203826108c1565b612a376100a3565b9182918261257c565b039060025afa15612ab457612a5e612a59600051610e6e565b6128d5565b612a726002612a6d8391610efb565b6127dd565b90612a978183612a80612119565b612a886127d0565b91612a91612145565b936132fd565b612aab575050612aa690612840565b6129e3565b91509291509190565b610ec0565b612ac16100a3565b62461bcd60e51b815280612ad76004820161292b565b0390fd5b612b2d95939491612b1093612b0492612af2611c66565b50612afb611c66565b50919091612b33565b93909394919091612b33565b919091909291612b1e612119565b92612b27612145565b94612ee7565b91909190565b91612b6392612b40611c66565b50612b49611c66565b509190612b54612119565b91612b5d612145565b9361345c565b91909190565b90565b612b80612b7b612b8592612b69565b610652565b6101ca565b90565b612ba370014551231950b75fc4402da1732fc9bebe19612b6c565b90565b612bb5612bbb919392936101ca565b926101ca565b8203918211612bc657565b610b63565b634e487b7160e01b600052601260045260246000fd5b612bed612bf3916101ca565b916101ca565b908115612bfe570690565b612bcb565b612c17612c12612c1c926101ca565b610e6e565b610e2a565b90565b90565b612c36612c31612c3b92612c1f565b610652565b610299565b90565b90565b612c55612c50612c5a92612c3e565b610652565b610299565b90565b612c81612c8f9196959694929394612c73610868565b50612c7c612b88565b612ba6565b612c89612b88565b90612be1565b83612c98612b88565b908115612d9c57612cbd612cd192612ccb92612ce2950995612cb8612b88565b612ba6565b612cc5612b88565b90612be1565b93612c03565b91612cdc6002611f3e565b90612be1565b612cf5612cef6000610dc0565b916101ca565b1415600014612d8c57612d08601c612c41565b905b612d1384612c03565b9293612d1d612b88565b938415612d8757612d37600095612d499360209809612c03565b90612d406100a3565b94859485610e81565b838052039060015afa15612d8257612d78612d72612d7e92612d6c600051610e6e565b946134e2565b92610113565b91610113565b1490565b610ec0565b612bcb565b612d96601b612c22565b90612d0a565b612bcb565b612db5612db0612dba92610a94565b610e6e565b610e2a565b90565b612dc690612da1565b9052565b612e00612e0794612df6606094989795612dec608086019a6000870190612dbd565b602085019061029f565b6040830190610e74565b0190610e74565b565b9091939293612e16610868565b50612e2d600091612e276002611f3e565b90612be1565b612e40612e3a6000610dc0565b916101ca565b1415600014612ed757612e53601c612c41565b905b612e5e84612c03565b9293612e68612b88565b938415612ed257612e82600095612e949360209809612c03565b90612e8b6100a3565b94859485612dca565b838052039060015afa15612ecd57612ec3612ebd612ec992612eb7600051610e6e565b946134e2565b92610113565b91610113565b1490565b610ec0565b612bcb565b612ee1601b612c22565b90612e55565b909391612f199593612f0d91612efb611c66565b50612f04611c66565b50908591613544565b9194909192939461356f565b91909190565b600090565b612f679695936001612f5b94612f4e8285612f46612f5597612f619c99612511565b018092612511565b019061252b565b9061252b565b9061252b565b9061252b565b90565b9391600096612fd59293612fc160209a612fbb612ff49a612fb5612fe39a612f90612f1f565b50612faf612f9e60fe6124e9565b9b612fa96002610efb565b9e613087565b98613087565b94613087565b93613087565b92612fca6100a3565b9788968c8801612f24565b8682018103825203826108c1565b612feb6100a3565b9182918261257c565b039060025afa1561302157600061300b8151610e6e565b613013612f1f565b506040519082820152015190565b610ec0565b606090565b61303a613040919392936101ca565b926101ca565b820180921161304b57565b610b63565b90565b61305f613064916101ca565b613050565b9052565b60018161307b6130839360209695612511565b018092613053565b0190565b906130c46130bf6130ea9261309a613026565b506130ba6130b46002926130ae6002611f3e565b90612be1565b91611f3e565b61302b565b610afd565b6130db6130cf6100a3565b93849260208401613068565b602082018103825203826108c1565b90565b60207f6420454320706f696e7420707265666978000000000000000000000000000000917f456c6c697074696343757276653a696e6e76616c696420636f6d70726573736560008201520152565b6131486031604092611546565b613151816130ed565b0190565b61316b906020810190600081830391015261313b565b90565b1561317557565b61317d6100a3565b62461bcd60e51b81528061319360048201613155565b0390fd5b6131ab6131a66131b09261116d565b610652565b6101ca565b90565b6131bf6131c5916101ca565b916101ca565b9081156131d0570490565b612bcb565b939290916131e1611c66565b50846131f66131f06002610efb565b91610299565b1480156132dd575b6132079061316e565b828384869182156132d85709859182156132d357099290849182156132ce570990839182156132c95708829182156132c4576132959261328592613274920861326d61325d866132576001611024565b9061302b565b6132676004613197565b906131b3565b8591613728565b9361327f8591610bd8565b9061302b565b61328f6002611f3e565b90612be1565b6132a86132a26000610dc0565b916101ca565b146000146132b557505b90565b906132bf91612ba6565b6132b2565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b50613207856132f56132ef6003610fde565b91610299565b1490506131fe565b929093919361330a610868565b50600061331f613319866101ca565b91610dc0565b148015613441575b8015613426575b801561340b575b6134015780839182156133fc5709928081849182156133f7570981849182156133f25709948061336e6133686000610dc0565b916101ca565b036133c9575b50508061338a6133846000610dc0565b916101ca565b036133a9575b505061339f6133a591926101ca565b916101ca565b1490565b909192909180156133c4576133a59261339f92089291613390565b612bcb565b9091949190839182156133ed5709829182156133e85708923880613374565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b5050505050600090565b508061341f613419856101ca565b916101ca565b1015613335565b50600061343b613435836101ca565b91610dc0565b1461332e565b508361345561344f856101ca565b916101ca565b1015613327565b9161349d94939161348f9361346f611c66565b50613478611c66565b509091600193926134898795611024565b92613817565b929190929092909192613936565b91909190565b600090565b6020816134ba6134c293839695613053565b018092613053565b0190565b6134da6134d56134df926101ca565b610652565b610108565b90565b6135376135419261351f61353c936134f86134a3565b506135106135046100a3565b938492602084016134a8565b602082018103825203826108c1565b61353161352b82610bb3565b91610d50565b206128d5565b6134c6565b610671565b90565b9161356761356c929493613556611c66565b5061355f611c66565b509482612ba6565b612be1565b90565b929094939161357c611c66565b50613585611c66565b506135906000610dc0565b5061359b6000610dc0565b506135a66000610dc0565b50836135ba6135b4836101ca565b916101ca565b1460001461363d575084908491821561363857086135e16135db6000610dc0565b916101ca565b1460001461360757505050506000906136046135fe600093610dc0565b92610dc0565b90565b61363293613623926001929161361d8694611024565b91614130565b92919290925b92909192613936565b91909190565b612bcb565b9150936136329461366b939190600193909160019061366561365f8997611024565b92611024565b94613a1f565b9291929092613629565b60007f456c6c697074696343757276653a206d6f64756c7573206973207a65726f0000910152565b6136aa601e602092611546565b6136b381613675565b0190565b6136cd906020810190600081830391015261369d565b90565b156136d757565b6136df6100a3565b62461bcd60e51b8152806136f5600482016136b7565b0390fd5b90565b61371061370b613715926136f9565b610652565b6101ca565b90565b613725600160ff1b6136fc565b90565b9091613732611c66565b506137518161374a6137446000610dc0565b916101ca565b14156136d0565b8161376561375f6000610dc0565b916101ca565b14613807578261377e6137786000610dc0565b916101ca565b146137f757919061378f6001611024565b92613798613718565b925b600084116137a9575050505090565b9091929382808080601094818a881615158a0a918009098160028a0487161515890a91800909816004890486161515880a91800909816008880485161515870a91800909940492919061379a565b5050506138046001611024565b90565b5050506138146000610dc0565b90565b9493929194613824611c66565b5061382d611c66565b50613836611c66565b508061384b6138456000610dc0565b916101ca565b1461392857959061385c6000610dc0565b956138676000610dc0565b936138726001611024565b985b806138886138826000610dc0565b916101ca565b1461391757806138986001611024565b166138ac6138a66000610dc0565b916101ca565b036138e9575b906138cb6138d793926138c56002611f3e565b906131b3565b93919087918993614130565b97919794909792979197949094613874565b976138cb95829a6138d7949361390793929187908692938d95613a1f565b9a919690969991929350506138b2565b505050509250929050919291929190565b509150939150919291929190565b916139589094939194613947611c66565b50613950611c66565b5082906143ae565b91828383918215613996570990818391821561399157099492908291821561398c570990918215613987570990565b612bcb565b612bcb565b612bcb565b612bcb565b60007f557365206a6163446f75626c652066756e6374696f6e20696e73746561640000910152565b6139d0601e602092611546565b6139d98161399b565b0190565b6139f390602081019060008183039101526139c3565b90565b156139fd57565b613a056100a3565b62461bcd60e51b815280613a1b600482016139dd565b0390fd5b929694959693909193613a30611c66565b50613a39611c66565b50613a42611c66565b5083613a57613a516000610dc0565b916101ca565b1480614115575b6141065780613a76613a706000610dc0565b916101ca565b14806140eb575b6140dc57613a896109ad565b9285868a9081156140d757613ab29209613aad86613aa76000610dc0565b90610ffa565b611c6b565b85613acf613aca86613ac46000610dc0565b90610ffa565b611017565b8a9081156140d257613af59209613af086613aea6001611024565b90610ffa565b611c6b565b87888a9081156140cd57613b1d9209613b1886613b126002611f3e565b90610ffa565b611c6b565b87613b3a613b3586613b2f6002611f3e565b90610ffa565b611017565b8a9081156140c857613b609209613b5b86613b556003611e8c565b90610ffa565b611c6b565b613b6a6004610979565b94613b87613b8286613b7c6002611f3e565b90610ffa565b611017565b8a9081156140c357613b9d920960008701611c6b565b613bb9613bb485613bae6003611e8c565b90610ffa565b611017565b899081156140be57613bcf920960208601611c6b565b90613bec613be784613be16000610dc0565b90610ffa565b611017565b90889283156140b957613c2193613c1c93613c0b920960408701611c6b565b92613c166001611024565b90610ffa565b611017565b869081156140b457613c37920960608301611c6b565b93613c54613c4f86613c496000610dc0565b90610ffa565b611017565b613c81613c7b613c76613c7189613c6b6002611f3e565b90610ffa565b611017565b6101ca565b916101ca565b1415801561405e575b613c93906139f6565b613c9b6109ad565b93613cb8613cb387613cad6002611f3e565b90610ffa565b611017565b613cde83613cd8613cd38a613ccd6000610dc0565b90610ffa565b611017565b90612ba6565b8390811561405957613d049208613cff87613cf96000610dc0565b90610ffa565b611c6b565b613d20613d1b87613d156003611e8c565b90610ffa565b611017565b613d4683613d40613d3b8a613d356001611024565b90610ffa565b611017565b90612ba6565b8390811561405457613d6c9208613d6787613d616001611024565b90610ffa565b611c6b565b613d88613d8386613d7d6000610dc0565b90610ffa565b611017565b613da4613d9f87613d996000610dc0565b90610ffa565b611017565b8390811561404f57613dca9209613dc587613dbf6002611f3e565b90610ffa565b611c6b565b613de6613de186613ddb6002611f3e565b90610ffa565b611017565b613e02613dfd87613df76000610dc0565b90610ffa565b611017565b8390811561404a57613e289209613e2387613e1d6003611e8c565b90610ffa565b611c6b565b613e44613e3f86613e396001611024565b90610ffa565b611017565b613e60613e5b87613e556001611024565b90610ffa565b611017565b839182156140455709613e8f83613e89613e8489613e7e6003611e8c565b90610ffa565b611017565b90612ba6565b83918215614040570882600290613eb8613eb38a613ead6000610dc0565b90610ffa565b611017565b613ed4613ecf8a613ec96002611f3e565b90610ffa565b611017565b8691821561403b57098590811561403657613ef1613ef894611f3e565b0990612ba6565b83918215614031570895613f1e613f1987613f136001611024565b90610ffa565b611017565b613f3a613f3583613f2f6000610dc0565b90610ffa565b611017565b613f56613f5189613f4b6002611f3e565b90610ffa565b611017565b8591821561402c5709613f6a858a90612ba6565b85918215614027570884918215614022570990613f9a613f958592613f8f6001611024565b90610ffa565b611017565b90613fb7613fb289613fac6003611e8c565b90610ffa565b611017565b8590811561401d57613fca930990612ba6565b9083801561401857613ff192613fec920896613fe66000610dc0565b90610ffa565b611017565b92908291821561401357099091821561400e570992919291929190565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b50613c9361407e614079876140736001611024565b90610ffa565b611017565b6140ab6140a56140a061409b8a6140956003611e8c565b90610ffa565b611017565b6101ca565b916101ca565b14159050613c8a565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b50509350909350919291929190565b50816141006140fa6000610dc0565b916101ca565b14613a7d565b93509495505050919291929190565b508261412a6141246000610dc0565b916101ca565b14613a5e565b9492949390919361413f611c66565b50614148611c66565b50614151611c66565b50846141666141606000610dc0565b916101ca565b146142e8578081839182156142e35709958384849182156142de5709918687859182156142d957099060049084869182156142d45709859182156142cf576141ad90613197565b0997600390859182156142ca576141c390611e8c565b09919080859182156142c55709849182156142c05709839182156142bb5708958687849182156142b6570983829083869081156142b157614205930890612ba6565b849182156142ac5708969061421b848990612ba6565b849182156142a75708839182156142a257099082600891808591821561429d5709849081156142985761425061425794610a35565b0990612ba6565b82918215614293570893600292908291821561428e5709909182156142895761427f90611f3e565b0992919291929190565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b612bcb565b9193945050919291929190565b60007f496e76616c6964206e756d626572000000000000000000000000000000000000910152565b61432a600e602092611546565b614333816142f5565b0190565b61434d906020810190600081830391015261431d565b90565b1561435757565b61435f6100a3565b62461bcd60e51b81528061437560048201614337565b0390fd5b61438861438e919392936101ca565b926101ca565b9161439a8382026101ca565b9281840414901517156143a957565b610b63565b6143b6611c66565b50806143cb6143c56000610dc0565b916101ca565b14158061449a575b80614479575b6143e290614350565b6143ec6000610dc0565b6143f66001611024565b8390614400611c66565b505b836144166144106000610dc0565b916101ca565b14614471576144268285906131b3565b8193918682918890811561446c5761443f930990612ba6565b91868015614467576144609361445a92089495809492614379565b90612ba6565b9291614402565b612bcb565b612bcb565b505091505090565b506143e28261449161448b6000610dc0565b916101ca565b141590506143d9565b50806144ae6144a8846101ca565b916101ca565b14156143d356fea264697066735822122065e5a4b6bbfee969aa3aadc77e2705399027a0bccf63d28cf2e6842668f0d59864736f6c634300081e0033",
}

// VerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use VerifierMetaData.ABI instead.
var VerifierABI = VerifierMetaData.ABI

// VerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use VerifierMetaData.Bin instead.
var VerifierBin = VerifierMetaData.Bin

// DeployVerifier deploys a new Ethereum contract, binding an instance of Verifier to it.
func DeployVerifier(auth *bind.TransactOpts, backend bind.ContractBackend, _bloom common.Address) (common.Address, *types.Transaction, *Verifier, error) {
	parsed, err := VerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VerifierBin), backend, _bloom)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// Verifier is an auto generated Go binding around an Ethereum contract.
type Verifier struct {
	VerifierCaller     // Read-only binding to the contract
	VerifierTransactor // Write-only binding to the contract
	VerifierFilterer   // Log filterer for contract events
}

// VerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type VerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VerifierSession struct {
	Contract     *Verifier         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VerifierCallerSession struct {
	Contract *VerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// VerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VerifierTransactorSession struct {
	Contract     *VerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// VerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type VerifierRaw struct {
	Contract *Verifier // Generic contract binding to access the raw methods on
}

// VerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VerifierCallerRaw struct {
	Contract *VerifierCaller // Generic read-only contract binding to access the raw methods on
}

// VerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VerifierTransactorRaw struct {
	Contract *VerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVerifier creates a new instance of Verifier, bound to a specific deployed contract.
func NewVerifier(address common.Address, backend bind.ContractBackend) (*Verifier, error) {
	contract, err := bindVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// NewVerifierCaller creates a new read-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierCaller(address common.Address, caller bind.ContractCaller) (*VerifierCaller, error) {
	contract, err := bindVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierCaller{contract: contract}, nil
}

// NewVerifierTransactor creates a new write-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*VerifierTransactor, error) {
	contract, err := bindVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierTransactor{contract: contract}, nil
}

// NewVerifierFilterer creates a new log filterer instance of Verifier, bound to a specific deployed contract.
func NewVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*VerifierFilterer, error) {
	contract, err := bindVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VerifierFilterer{contract: contract}, nil
}

// bindVerifier binds a generic wrapper to an already deployed contract.
func bindVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := VerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.VerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transact(opts, method, params...)
}

// Bloom is a free data retrieval call binding the contract method 0xd26da14f.
//
// Solidity: function bloom() view returns(address)
func (_Verifier *VerifierCaller) Bloom(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "bloom")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bloom is a free data retrieval call binding the contract method 0xd26da14f.
//
// Solidity: function bloom() view returns(address)
func (_Verifier *VerifierSession) Bloom() (common.Address, error) {
	return _Verifier.Contract.Bloom(&_Verifier.CallOpts)
}

// Bloom is a free data retrieval call binding the contract method 0xd26da14f.
//
// Solidity: function bloom() view returns(address)
func (_Verifier *VerifierCallerSession) Bloom() (common.Address, error) {
	return _Verifier.Contract.Bloom(&_Verifier.CallOpts)
}

// CheckCredential is a free data retrieval call binding the contract method 0xeafa217e.
//
// Solidity: function checkCredential(bytes pubKey, bytes signature, bytes proof, uint256 epoch) view returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierCaller) CheckCredential(opts *bind.CallOpts, pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (struct {
	Valid     bool
	ErrorCode uint8
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "checkCredential", pubKey, signature, proof, epoch)

	outstruct := new(struct {
		Valid     bool
		ErrorCode uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Valid = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ErrorCode = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// CheckCredential is a free data retrieval call binding the contract method 0xeafa217e.
//
// Solidity: function checkCredential(bytes pubKey, bytes signature, bytes proof, uint256 epoch) view returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierSession) CheckCredential(pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (struct {
	Valid     bool
	ErrorCode uint8
}, error) {
	return _Verifier.Contract.CheckCredential(&_Verifier.CallOpts, pubKey, signature, proof, epoch)
}

// CheckCredential is a free data retrieval call binding the contract method 0xeafa217e.
//
// Solidity: function checkCredential(bytes pubKey, bytes signature, bytes proof, uint256 epoch) view returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierCallerSession) CheckCredential(pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (struct {
	Valid     bool
	ErrorCode uint8
}, error) {
	return _Verifier.Contract.CheckCredential(&_Verifier.CallOpts, pubKey, signature, proof, epoch)
}

// CheckCredentialFast is a free data retrieval call binding the contract method 0x83a5cc32.
//
// Solidity: function checkCredentialFast(bytes pubKey, bytes signature, bytes proof, uint256 epoch, uint256[2] uPoint, uint256[4] vComponents) view returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierCaller) CheckCredentialFast(opts *bind.CallOpts, pubKey []byte, signature []byte, proof []byte, epoch *big.Int, uPoint [2]*big.Int, vComponents [4]*big.Int) (struct {
	Valid     bool
	ErrorCode uint8
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "checkCredentialFast", pubKey, signature, proof, epoch, uPoint, vComponents)

	outstruct := new(struct {
		Valid     bool
		ErrorCode uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Valid = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ErrorCode = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// CheckCredentialFast is a free data retrieval call binding the contract method 0x83a5cc32.
//
// Solidity: function checkCredentialFast(bytes pubKey, bytes signature, bytes proof, uint256 epoch, uint256[2] uPoint, uint256[4] vComponents) view returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierSession) CheckCredentialFast(pubKey []byte, signature []byte, proof []byte, epoch *big.Int, uPoint [2]*big.Int, vComponents [4]*big.Int) (struct {
	Valid     bool
	ErrorCode uint8
}, error) {
	return _Verifier.Contract.CheckCredentialFast(&_Verifier.CallOpts, pubKey, signature, proof, epoch, uPoint, vComponents)
}

// CheckCredentialFast is a free data retrieval call binding the contract method 0x83a5cc32.
//
// Solidity: function checkCredentialFast(bytes pubKey, bytes signature, bytes proof, uint256 epoch, uint256[2] uPoint, uint256[4] vComponents) view returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierCallerSession) CheckCredentialFast(pubKey []byte, signature []byte, proof []byte, epoch *big.Int, uPoint [2]*big.Int, vComponents [4]*big.Int) (struct {
	Valid     bool
	ErrorCode uint8
}, error) {
	return _Verifier.Contract.CheckCredentialFast(&_Verifier.CallOpts, pubKey, signature, proof, epoch, uPoint, vComponents)
}

// GetFastVerifyParams is a free data retrieval call binding the contract method 0x79c3faf9.
//
// Solidity: function getFastVerifyParams(bytes pubKey, bytes proof, uint256 epoch) view returns(uint256[2] uPoint, uint256[4] vComponents)
func (_Verifier *VerifierCaller) GetFastVerifyParams(opts *bind.CallOpts, pubKey []byte, proof []byte, epoch *big.Int) (struct {
	UPoint      [2]*big.Int
	VComponents [4]*big.Int
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "getFastVerifyParams", pubKey, proof, epoch)

	outstruct := new(struct {
		UPoint      [2]*big.Int
		VComponents [4]*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.UPoint = *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)
	outstruct.VComponents = *abi.ConvertType(out[1], new([4]*big.Int)).(*[4]*big.Int)

	return *outstruct, err

}

// GetFastVerifyParams is a free data retrieval call binding the contract method 0x79c3faf9.
//
// Solidity: function getFastVerifyParams(bytes pubKey, bytes proof, uint256 epoch) view returns(uint256[2] uPoint, uint256[4] vComponents)
func (_Verifier *VerifierSession) GetFastVerifyParams(pubKey []byte, proof []byte, epoch *big.Int) (struct {
	UPoint      [2]*big.Int
	VComponents [4]*big.Int
}, error) {
	return _Verifier.Contract.GetFastVerifyParams(&_Verifier.CallOpts, pubKey, proof, epoch)
}

// GetFastVerifyParams is a free data retrieval call binding the contract method 0x79c3faf9.
//
// Solidity: function getFastVerifyParams(bytes pubKey, bytes proof, uint256 epoch) view returns(uint256[2] uPoint, uint256[4] vComponents)
func (_Verifier *VerifierCallerSession) GetFastVerifyParams(pubKey []byte, proof []byte, epoch *big.Int) (struct {
	UPoint      [2]*big.Int
	VComponents [4]*big.Int
}, error) {
	return _Verifier.Contract.GetFastVerifyParams(&_Verifier.CallOpts, pubKey, proof, epoch)
}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() view returns(address)
func (_Verifier *VerifierCaller) Issuer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "issuer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() view returns(address)
func (_Verifier *VerifierSession) Issuer() (common.Address, error) {
	return _Verifier.Contract.Issuer(&_Verifier.CallOpts)
}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() view returns(address)
func (_Verifier *VerifierCallerSession) Issuer() (common.Address, error) {
	return _Verifier.Contract.Issuer(&_Verifier.CallOpts)
}

// MeasureCheckCredentialFastGas is a paid mutator transaction binding the contract method 0x9e93651e.
//
// Solidity: function measureCheckCredentialFastGas(bytes pubKey, bytes signature, bytes proof, uint256 epoch, uint256[2] uPoint, uint256[4] vComponents) returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierTransactor) MeasureCheckCredentialFastGas(opts *bind.TransactOpts, pubKey []byte, signature []byte, proof []byte, epoch *big.Int, uPoint [2]*big.Int, vComponents [4]*big.Int) (*types.Transaction, error) {
	return _Verifier.contract.Transact(opts, "measureCheckCredentialFastGas", pubKey, signature, proof, epoch, uPoint, vComponents)
}

// MeasureCheckCredentialFastGas is a paid mutator transaction binding the contract method 0x9e93651e.
//
// Solidity: function measureCheckCredentialFastGas(bytes pubKey, bytes signature, bytes proof, uint256 epoch, uint256[2] uPoint, uint256[4] vComponents) returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierSession) MeasureCheckCredentialFastGas(pubKey []byte, signature []byte, proof []byte, epoch *big.Int, uPoint [2]*big.Int, vComponents [4]*big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.MeasureCheckCredentialFastGas(&_Verifier.TransactOpts, pubKey, signature, proof, epoch, uPoint, vComponents)
}

// MeasureCheckCredentialFastGas is a paid mutator transaction binding the contract method 0x9e93651e.
//
// Solidity: function measureCheckCredentialFastGas(bytes pubKey, bytes signature, bytes proof, uint256 epoch, uint256[2] uPoint, uint256[4] vComponents) returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierTransactorSession) MeasureCheckCredentialFastGas(pubKey []byte, signature []byte, proof []byte, epoch *big.Int, uPoint [2]*big.Int, vComponents [4]*big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.MeasureCheckCredentialFastGas(&_Verifier.TransactOpts, pubKey, signature, proof, epoch, uPoint, vComponents)
}

// MeasureCheckCredentialGas is a paid mutator transaction binding the contract method 0x5f1c7a21.
//
// Solidity: function measureCheckCredentialGas(bytes pubKey, bytes signature, bytes proof, uint256 epoch) returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierTransactor) MeasureCheckCredentialGas(opts *bind.TransactOpts, pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (*types.Transaction, error) {
	return _Verifier.contract.Transact(opts, "measureCheckCredentialGas", pubKey, signature, proof, epoch)
}

// MeasureCheckCredentialGas is a paid mutator transaction binding the contract method 0x5f1c7a21.
//
// Solidity: function measureCheckCredentialGas(bytes pubKey, bytes signature, bytes proof, uint256 epoch) returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierSession) MeasureCheckCredentialGas(pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.MeasureCheckCredentialGas(&_Verifier.TransactOpts, pubKey, signature, proof, epoch)
}

// MeasureCheckCredentialGas is a paid mutator transaction binding the contract method 0x5f1c7a21.
//
// Solidity: function measureCheckCredentialGas(bytes pubKey, bytes signature, bytes proof, uint256 epoch) returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierTransactorSession) MeasureCheckCredentialGas(pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.MeasureCheckCredentialGas(&_Verifier.TransactOpts, pubKey, signature, proof, epoch)
}

// Update is a paid mutator transaction binding the contract method 0xe9b2cd3f.
//
// Solidity: function update(bytes[] newFilters, uint256[] ks, uint256[] bitLens) returns()
func (_Verifier *VerifierTransactor) Update(opts *bind.TransactOpts, newFilters [][]byte, ks []*big.Int, bitLens []*big.Int) (*types.Transaction, error) {
	return _Verifier.contract.Transact(opts, "update", newFilters, ks, bitLens)
}

// Update is a paid mutator transaction binding the contract method 0xe9b2cd3f.
//
// Solidity: function update(bytes[] newFilters, uint256[] ks, uint256[] bitLens) returns()
func (_Verifier *VerifierSession) Update(newFilters [][]byte, ks []*big.Int, bitLens []*big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.Update(&_Verifier.TransactOpts, newFilters, ks, bitLens)
}

// Update is a paid mutator transaction binding the contract method 0xe9b2cd3f.
//
// Solidity: function update(bytes[] newFilters, uint256[] ks, uint256[] bitLens) returns()
func (_Verifier *VerifierTransactorSession) Update(newFilters [][]byte, ks []*big.Int, bitLens []*big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.Update(&_Verifier.TransactOpts, newFilters, ks, bitLens)
}
