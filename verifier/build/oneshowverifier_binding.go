// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package verifier

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// VerifierMetaData contains all meta data concerning the Verifier contract.
var VerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bloom\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bloom\",\"outputs\":[{\"internalType\":\"contractCascadingBloomFilter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"}],\"name\":\"checkCredential\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"errorCode\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"checkCredentialVrfDebug\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"errorCode\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"pubkeyXY\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"decodedProof\",\"type\":\"uint256[4]\"},{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"newFilters\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bitLens\",\"type\":\"uint256[]\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523461002f576100196100146100fa565b6101dd565b610021610034565b6139b16101fe82396139b190f35b61003a565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100699061003f565b810190811060018060401b0382111761008157604052565b610049565b90610099610092610034565b928361005f565b565b600080fd5b60018060a01b031690565b6100b4906100a0565b90565b6100c0816100ab565b036100c757565b600080fd5b905051906100d9826100b7565b565b906020828203126100f5576100f2916000016100cc565b90565b61009b565b610118613baf8038038061010d81610086565b9283398101906100db565b90565b90565b61013261012d610137926100a0565b61011b565b6100a0565b90565b6101439061011e565b90565b61014f9061013a565b90565b60001b90565b9061016960018060a01b0391610152565b9181191691161790565b61017c9061013a565b90565b90565b9061019761019261019e92610173565b61017f565b8254610158565b9055565b6101ab9061011e565b90565b6101b7906101a2565b90565b90565b906101d26101cd6101d9926101ae565b6101ba565b8254610158565b9055565b6101e96101f091610146565b6000610182565b6101fb3360016101bd565b56fe60806040526004361015610013575b610731565b61001e60003561006d565b80631d14384814610068578063a9b6482714610063578063d26da14f1461005e578063e831d28e146100595763e9b2cd3f0361000e576106f7565b6105a9565b61036e565b610295565b610112565b60e01c90565b60405190565b600080fd5b600080fd5b600091031261008e57565b61007e565b1c90565b60018060a01b031690565b6100b29060086100b79302610093565b610097565b90565b906100c591546100a2565b90565b6100d560016000906100ba565b90565b60018060a01b031690565b6100ec906100d8565b90565b6100f8906100e3565b9052565b9190610110906000602085019401906100ef565b565b3461014257610122366004610083565b61013e61012d6100c8565b610135610073565b918291826100fc565b0390f35b610079565b600080fd5b600080fd5b600080fd5b600080fd5b909182601f830112156101955781359167ffffffffffffffff831161019057602001926001830284011161018b57565b610156565b610151565b61014c565b9060608282031261021c57600082013567ffffffffffffffff811161021757816101c591840161015b565b929093602082013567ffffffffffffffff811161021257836101e891840161015b565b929093604082013567ffffffffffffffff811161020d57610209920161015b565b9091565b610147565b610147565b610147565b61007e565b151590565b61022f90610221565b9052565b60ff1690565b61024290610233565b9052565b90565b61025290610246565b9052565b61028c61029394610282606094989795610278608086019a6000870190610226565b6020850190610239565b6040830190610249565b01906100ef565b565b346102d0576102cc6102b76102ab36600461019a565b94939093929192610b4e565b906102c3949294610073565b94859485610256565b0390f35b610079565b60018060a01b031690565b6102f09060086102f59302610093565b6102d5565b90565b9061030391546102e0565b90565b6103116000806102f8565b90565b90565b61032b610326610330926100d8565b610314565b6100d8565b90565b61033c90610317565b90565b61034890610333565b90565b6103549061033f565b9052565b919061036c9060006020850194019061034b565b565b3461039e5761037e366004610083565b61039a610389610306565b610391610073565b91829182610358565b0390f35b610079565b90565b6103af816103a3565b036103b657565b600080fd5b905035906103c8826103a6565b565b9160808383031261045b57600083013567ffffffffffffffff811161045657826103f591850161015b565b929093602081013567ffffffffffffffff8111610451578261041891830161015b565b929093604083013567ffffffffffffffff811161044c5761043e8361044992860161015b565b9390946060016103bb565b90565b610147565b610147565b610147565b61007e565b50600290565b905090565b90565b610477906103a3565b9052565b906104888160209361046e565b0190565b60200190565b6104ae6104a86104a183610460565b8094610466565b9161046b565b6000915b8383106104bf5750505050565b6104d56104cf600192845161047b565b9261048c565b920191906104b2565b50600490565b905090565b90565b60200190565b61050e610508610501836104de565b80946104e4565b916104e9565b6000915b83831061051f5750505050565b61053561052f600192845161047b565b926104ec565b92019190610512565b94929097969593916101608601986000870161055991610226565b6020860161056691610239565b6040850161057391610249565b60608401610580916100ef565b6080830161058d91610492565b60c0820161059a916104f2565b610140016105a791610249565b565b346105e7576105e36105cb6105bf3660046103ca565b9594909493919361110c565b936105da979597939193610073565b9788978861053e565b0390f35b610079565b909182601f830112156106265781359167ffffffffffffffff831161062157602001926020830284011161061c57565b610156565b610151565b61014c565b909182601f830112156106655781359167ffffffffffffffff831161066057602001926020830284011161065b57565b610156565b610151565b61014c565b906060828203126106ec57600082013567ffffffffffffffff81116106e757816106959184016105ec565b929093602082013567ffffffffffffffff81116106e257836106b891840161062b565b929093604082013567ffffffffffffffff81116106dd576106d9920161062b565b9091565b610147565b610147565b610147565b61007e565b60000190565b3461072c5761071661070a36600461066a565b94939093929192611944565b61071e610073565b80610728816106f1565b0390f35b610079565b600080fd5b600090565b600090565b600090565b600090565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906107799061074f565b810190811067ffffffffffffffff82111761079357604052565b610759565b906107ab6107a4610073565b928361076f565b565b67ffffffffffffffff81116107cb576107c760209161074f565b0190565b610759565b90826000939282370152565b909291926107f16107ec826107ad565b610798565b9381855260208501908284011161080d5761080b926107d0565b565b61074a565b61081d9136916107dc565b90565b60200190565b5190565b60001c90565b61083c6108419161082a565b610097565b90565b61084e9054610830565b90565b5090565b90565b61086c61086761087192610855565b610314565b6103a3565b90565b90565b61088b61088661089092610874565b610314565b610233565b90565b634e487b7160e01b600052603260045260246000fd5b91908110156108b9576001020190565b610893565b90565b6108d56108d06108da926108be565b610314565b6103a3565b90565b60ff60f81b1690565b60f81c90565b6109006108fb61090592610233565b610314565b610233565b90565b610914610919916108e6565b6108ec565b90565b90565b61093361092e6109389261091c565b610314565b6103a3565b90565b90565b61095261094d6109579261093b565b610314565b6103a3565b90565b600080fd5b600080fd5b9093929384831161098457841161097f576001820201920390565b61095f565b61095a565b1b90565b9061099b6109a29183610851565b9135610246565b90602081106109b0575b5090565b6109c39060001990602003600802610989565b16386109ac565b60001b90565b610a06610a0d946109fc6060949897956109f2608086019a6000870190610249565b6020850190610239565b6040830190610249565b0190610249565b565b610a17610073565b3d6000823e3d90fd5b90565b610a37610a32610a3c92610a20565b610314565b610233565b90565b610a4b610a509161082a565b6102d5565b90565b610a5d9054610a3f565b90565b600080fd5b60e01b90565b610a7481610221565b03610a7b57565b600080fd5b90505190610a8d82610a6b565b565b90505190610a9c826103a6565b565b9190604083820312610ac75780610abb610ac49260008601610a80565b93602001610a8f565b90565b61007e565b60209181520190565b9190610aef81610ae881610af495610acc565b80956107d0565b61074f565b0190565b9091610b109260208301926000818503910152610ad5565b90565b90565b610b2a610b25610b2f92610b13565b610314565b610233565b90565b610b46610b41610b4b9261091c565b610314565b610233565b90565b90610b839196949396959295610b62610736565b50610b6b61073b565b50610b74610740565b50610b7d610745565b50610812565b610b95610b8f82610826565b91610820565b2094610ba16001610844565b94610bad818390610851565b610bc0610bba6041610858565b916103a3565b03610d6a57602091600091610c5c8991610c4a610c44610bfc610bf7610bf18589610beb60406108c1565b916108a9565b356108dd565b610908565b95610c26610c2085838b90610c1a610c148f9361091f565b9261093e565b92610964565b9061098d565b93908990610c3e610c3860409361093e565b926108c1565b92610964565b9061098d565b90610c53610073565b948594856109d0565b838052039060015afa15610d6557610c756000516109ca565b610c90610c8a610c856001610844565b6100e3565b916100e3565b03610d4d57604090610caa610ca56000610a53565b61033f565b610ccc63d423db2a949294610cd7610cc0610073565b96879586948594610a65565b845260048401610af8565b03915afa908115610d4857600091610d1b575b50610d0557600190610d00600094939294610b32565b929190565b600090610d16600394939294610b16565b929190565b610d3c915060403d8111610d41575b610d34818361076f565b810190610a9e565b610cea565b503d610d2a565b610a0f565b5050600090610d60600294939294610a23565b929190565b610a0f565b50505050600090610d7f600194939294610877565b929190565b67ffffffffffffffff8111610d995760200290565b610759565b610daa610daf91610d84565b610798565b90565b369037565b90610dd5610dc483610d9e565b92610dcf8491610d84565b90610db2565b565b610de16002610db7565b90565b67ffffffffffffffff8111610df95760200290565b610759565b610e0a610e0f91610de4565b610798565b90565b90610e30610e1f83610dfe565b92610e2a8491610de4565b90610db2565b565b610e3c6004610e12565b90565b90610e49906103a3565b9052565b610e61610e5c610e669261091c565b6109ca565b610246565b90565b90565b610e80610e7b610e8592610e69565b610314565b6103a3565b90565b90610e9a610e95836107ad565b610798565b918252565b369037565b90610ec9610eb183610e88565b92602080610ebf86936107ad565b9201910390610e9f565b565b6001610ed79101610233565b90565b610eee610ee9610ef392610e69565b610314565b610233565b90565b90565b610f0d610f08610f1292610ef6565b610314565b6103a3565b90565b610f29610f24610f2e926103a3565b610314565b610233565b90565b60f81b90565b610f4b610f46610f5092610233565b610f31565b6108dd565b90565b90565b610f6a610f65610f6f92610f53565b610314565b610233565b90565b634e487b7160e01b600052601160045260246000fd5b610f94610f9a91610233565b91610233565b90039060ff8211610fa757565b610f72565b90610fb682610826565b811015610fc857600160209102010190565b610893565b610fe1610fdc610fe692610233565b610314565b6103a3565b90565b61100890611002610ffc61100d94610233565b916103a3565b90610093565b6103a3565b90565b9061101a826104de565b811015611028576020020190565b610893565b61103790516103a3565b90565b61104e61104961105392610874565b610314565b6103a3565b90565b90565b61106561106a91610246565b611056565b9052565b61107a81602093611059565b0190565b60005b838110611092575050906000910152565b806020918301518185015201611081565b6110c26110cb6020936110d0936110b981610826565b93848093610acc565b9586910161107e565b61074f565b0190565b6110ea91602082019160008184039101526110a3565b90565b90565b6111046110ff611109926110ed565b610314565b610233565b90565b9695949192939661111b610736565b5061112461073b565b5061112d610740565b50611136610745565b5061113f610dd7565b50611148610e32565b50611151610740565b5061115d818390610812565b61116f61116982610826565b91610820565b209461117b6001610844565b94611187818390610851565b61119a6111946041610858565b916103a3565b0361157757602091600091611236899161122461121e6111d66111d16111cb85896111c560406108c1565b916108a9565b356108dd565b610908565b956112006111fa85838b906111f46111ee8f9361091f565b9261093e565b92610964565b9061098d565b9390899061121861121260409361093e565b926108c1565b92610964565b9061098d565b9061122d610073565b948594856109d0565b838052039060015afa156115725761124f6000516109ca565b61126a61126461125f6001610844565b6100e3565b916100e3565b036114ad579161128861128361128e9361129395610812565b6119fc565b97610812565b611b50565b946112a66112a16008610e6c565b610ea4565b93956112b26000610b32565b965b876112c86112c26008610eda565b91610233565b10156113395761132d816112f16112ec611333946112e660ff610ef9565b16610f15565b610f37565b61131c8b61131661130c8c926113076007610f56565b610f88565b9360001a93610fcd565b90610fac565b536113276008610eda565b90610fe9565b97610ecb565b966112b4565b5092955092611352611358919592958590859091611d30565b15610221565b6114885761139d61137b61137684611370600061091f565b90611010565b61102d565b6113976113928561138c600161103a565b90611010565b61102d565b90611f78565b9061140660406113d86113b86113b36000610a53565b61033f565b6113fb63d423db2a6113e7886113cc610073565b9586916020830161106e565b6020820181038252038561076f565b6113ef610073565b95869485938493610a65565b8352600483016110d4565b03915afa90811561148357600091611456575b5061143a57600190611432600097969594939297610b32565b959493929190565b60009061144e6004979695949392976110f0565b959493929190565b611477915060403d811161147c575b61146f818361076f565b810190610a9e565b611419565b503d611465565b610a0f565b6000600395949392916114a561149e6000610e4d565b9297610b16565b959493929190565b5050509291509250600060029392916114c66002610d9e565b6114dc6114d3600061091f565b60008301610e3f565b6114f26114e9600061091f565b60208301610e3f565b916114fd6004610dfe565b61151361150a600061091f565b60008301610e3f565b611529611520600061091f565b60208301610e3f565b61153f611536600061091f565b60408301610e3f565b61155561154c600061091f565b60608301610e3f565b9161156a6115636000610e4d565b9297610a23565b959493929190565b610a0f565b50505050509291509250600060019392916115926002610d9e565b6115a861159f600061091f565b60008301610e3f565b6115be6115b5600061091f565b60208301610e3f565b916115c96004610dfe565b6115df6115d6600061091f565b60008301610e3f565b6115f56115ec600061091f565b60208301610e3f565b61160b611602600061091f565b60408301610e3f565b611621611618600061091f565b60608301610e3f565b9161163661162f6000610e4d565b9297610877565b959493929190565b60209181520190565b60007f4e6f742069737375657200000000000000000000000000000000000000000000910152565b61167c600a60209261163e565b61168581611647565b0190565b61169f906020810190600081830391015261166f565b90565b156116a957565b6116b1610073565b62461bcd60e51b8152806116c760048201611689565b0390fd5b906116fe95949392916116f9336116f36116ed6116e86001610844565b6100e3565b916100e3565b146116a2565b6118a4565b565b600091031261170b57565b61007e565b60209181520190565b90565b60209181520190565b919061173f81611738816117449561171c565b80956107d0565b61074f565b0190565b906117539291611725565b90565b600080fd5b600080fd5b600080fd5b90356001602003823603038112156117a657016020813591019167ffffffffffffffff82116117a157600182023603831361179c57565b61175b565b611756565b611760565b60200190565b91816117bc91611710565b90816117cd60208302840194611719565b92836000925b8484106117e35750505050505090565b909192939495602061180f61180983856001950388526118038b88611765565b90611748565b986117ab565b9401940192949391906117d3565b60209181520190565b600080fd5b9037565b90918261183b9161181d565b9160018060fb1b03811161185e578291602061185a920293849161182b565b0190565b611826565b949290936118856118a1979561189394606089019189830360008b01526117b1565b91868303602088015261182f565b92604081850391015261182f565b90565b91949092936118bb6118b66000610a53565b61033f565b9263b163337d90949695919295843b1561193f576000966118f09488946118fb936118e4610073565b9b8c9a8b998a98610a65565b885260048801611863565b03925af1801561193a5761190d575b50565b61192d9060003d8111611933575b611925818361076f565b810190611700565b3861190a565b503d61191b565b610a0f565b610a60565b9061195295949392916116cb565b565b90565b61196b61196661197092611954565b610314565b6103a3565b90565b60007f4d616c666f726d656420636f6d7072657373656420454320706f696e74000000910152565b6119a8601d60209261163e565b6119b181611973565b0190565b6119cb906020810190600081830391015261199b565b90565b156119d557565b6119dd610073565b62461bcd60e51b8152806119f3600482016119b5565b0390fd5b600090565b611a04610dd7565b50611a2a611a1182610826565b611a24611a1e6021611957565b916103a3565b146119ce565b611a3261073b565b50611a3b6119f7565b50611a74611a5460216001840151930151928390612065565b611a6b611a616002610d9e565b9360008501610e3f565b60208301610e3f565b90565b90565b611a8e611a89611a9392611a77565b610314565b6103a3565b90565b60007f4d616c666f726d6564205652462070726f6f6600000000000000000000000000910152565b611acb601360209261163e565b611ad481611a96565b0190565b611aee9060208101906000818303910152611abe565b90565b15611af857565b611b00610073565b62461bcd60e51b815280611b1660048201611ad8565b0390fd5b600090565b6fffffffffffffffffffffffffffffffff1690565b611b48611b43611b4d92611b1f565b610314565b6103a3565b90565b602090611b5b610e32565b50611b81611b6882610826565b611b7b611b756051611a7a565b916103a3565b14611af1565b611b8961073b565b50611b926119f7565b50611b9b611b1a565b50611ba46119f7565b5001611c0c815160001a611c03611bfa600185015194611bf5611bd56031602184015160801c930151958890612065565b611bec611be26004610dfe565b9860008a01610e3f565b60208801610e3f565b611b34565b60408501610e3f565b60608301610e3f565b90565b611c23611c1e611c2892610b13565b610314565b6103a3565b90565b90565b611c42611c3d611c4792611c2b565b610314565b6103a3565b90565b611c737f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798611c2e565b90565b90565b611c8d611c88611c9292611c76565b610314565b6103a3565b90565b611cbe7f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8611c79565b90565b611cd5611cd0611cda92610a20565b610314565b6103a3565b90565b90611ce782610460565b811015611cf5576020020190565b610893565b60801c90565b611d14611d0f611d1992611b1f565b610314565b611b1f565b90565b611d28611d2d91611cfa565b611d00565b90565b611ec7611ec2611eb1611eac611ecc94611de787611d5b611ed2999a611d54610736565b50846121cc565b92909293611d7b611d7684611d706003611c0f565b90611010565b61102d565b90611d84611c4a565b611d8c611c95565b611da8611da387611d9d6002611cc1565b90611010565b61102d565b91611de1611ddc611dcb611dc687611dc0600061091f565b90611cdd565b61102d565b95611dd6600161103a565b90611cdd565b61102d565b94612363565b90611e65611e07611e0285611dfc6003611c0f565b90611010565b61102d565b8587611e25611e2088611e1a6002611cc1565b90611010565b61102d565b90611e42611e3d89611e37600061091f565b90611010565b61102d565b92611e5f611e5a8a611e54600161103a565b90611010565b61102d565b94612363565b9390939495611ea2611e9d611e8c611e8785611e81600061091f565b90611010565b61102d565b93611e97600161103a565b90611010565b61102d565b9293949596612406565b611d1c565b94611ebc6002611cc1565b90611010565b61102d565b6103a3565b91611b34565b1490565b90565b611eed611ee8611ef292611ed6565b610314565b610233565b90565b611efe90610f31565b90565b611f0d611f1291610233565b611ef5565b9052565b905090565b611f40611f3792602092611f2e81610826565b94858093611f16565b9384910161107e565b0190565b91611f62600184611f5a611f6997968396611f01565b018092611f01565b0190611f1b565b90565b611f7591611f1b565b90565b611fe0600091611fcf602094611f8c610740565b50611fc1611fae611f9d60fe611ed9565b92611fa86003610b16565b9561255b565b611fb6610073565b948593898501611f44565b86820181038252038261076f565b611fd7610073565b91829182611f6c565b039060025afa15611ff957611ff66000516109ca565b90565b610a0f565b612008600061091f565b90565b61201f61201a61202492610f53565b610314565b6103a3565b90565b612031600761200b565b90565b90565b61204b61204661205092612034565b610314565b6103a3565b90565b6120626401000003d019612037565b90565b90612093916120726119f7565b509061207c611ffe565b612084612027565b9161208d612053565b936126ce565b90565b6120bf926120b86001836120b082956120c59a9997611f01565b018092611f01565b0190611f1b565b90611f1b565b90565b6120d190610233565b60ff81146120df5760010190565b610f72565b61ffff1690565b6120ff6120fa61210492610233565b610314565b6120e4565b90565b90565b61211e61211961212392612107565b610314565b6120e4565b90565b61213661213d9160019493611f1b565b8092611f01565b0190565b61215561215061215a926103a3565b610314565b6103a3565b90565b61216961216e9161082a565b612141565b90565b60007f4e6f2076616c696420706f696e742077617320666f756e640000000000000000910152565b6121a6601860209261163e565b6121af81612171565b0190565b6121c99060208101906000818303910152612199565b90565b90612260906121d96119f7565b506121e26119f7565b506122516121f060fe611ed9565b9161223d6121fe6001610877565b9561223761223261222161221c84612216600061091f565b90611cdd565b61102d565b9261222c600161103a565b90611cdd565b61102d565b9061255b565b612245610073565b95869460208601612096565b6020820181038252038261076f565b61226a6000610b32565b5b8061228061227a61010061210a565b916120eb565b101561234157602060006122c8846122b785916122a961229e610073565b938492888401612126565b86820181038252038261076f565b6122bf610073565b91829182611f6c565b039060025afa1561233c576122e66122e16000516109ca565b61215d565b6122fa60026122f58391610a23565b612065565b9061231f8183612308611ffe565b612310612027565b91612319612053565b936127f6565b61233357505061232e906120c8565b61226b565b91509291509190565b610a0f565b612349610073565b62461bcd60e51b81528061235f600482016121b3565b0390fd5b6123b5959394916123989361238c9261237a6119f7565b506123836119f7565b50919091612955565b93909394919091612955565b9190919092916123a6611ffe565b926123af612053565b9461298b565b91909190565b600090565b61240396959360016123f7946123ea82856123e26123f1976123fd9c99611f01565b018092611f01565b0190611f1b565b90611f1b565b90611f1b565b90611f1b565b90565b9391600096612471929361245d60209a6124576124909a61245161247f9a61242c6123bb565b5061244b61243a60fe611ed9565b9b6124456002610a23565b9e61255b565b9861255b565b9461255b565b9361255b565b92612466610073565b9788968c88016123c0565b86820181038252038261076f565b612487610073565b91829182611f6c565b039060025afa156124bd5760006124a781516109ca565b6124af6123bb565b506040519082820152015190565b610a0f565b606090565b634e487b7160e01b600052601260045260246000fd5b6124e96124ef916103a3565b916103a3565b9081156124fa570690565b6124c7565b61250e612514919392936103a3565b926103a3565b820180921161251f57565b610f72565b90565b612533612538916103a3565b612524565b9052565b60018161254f6125579360209695611f01565b018092612527565b0190565b906125986125936125be9261256e6124c2565b5061258e6125886002926125826002611cc1565b906124dd565b91611cc1565b6124ff565b610f15565b6125af6125a3610073565b9384926020840161253c565b6020820181038252038261076f565b90565b60207f6420454320706f696e7420707265666978000000000000000000000000000000917f456c6c697074696343757276653a696e6e76616c696420636f6d70726573736560008201520152565b61261c603160409261163e565b612625816125c1565b0190565b61263f906020810190600081830391015261260f565b90565b1561264957565b612651610073565b62461bcd60e51b81528061266760048201612629565b0390fd5b61267f61267a612684926110ed565b610314565b6103a3565b90565b612693612699916103a3565b916103a3565b9081156126a4570490565b6124c7565b6126b86126be919392936103a3565b926103a3565b82039182116126c957565b610f72565b939290916126da6119f7565b50846126ef6126e96002610a23565b91610233565b1480156127d6575b61270090612642565b828384869182156127d15709859182156127cc57099290849182156127c7570990839182156127c25708829182156127bd5761278e9261277e9261276d920861276661275686612750600161103a565b906124ff565b612760600461266b565b90612687565b8591612a76565b936127788591610fcd565b906124ff565b6127886002611cc1565b906124dd565b6127a161279b600061091f565b916103a3565b146000146127ae57505b90565b906127b8916126a9565b6127ab565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b50612700856127ee6127e86003610b16565b91610233565b1490506126f7565b9290939193612803610736565b506000612818612812866103a3565b9161091f565b14801561293a575b801561291f575b8015612904575b6128fa5780839182156128f55709928081849182156128f0570981849182156128eb57099480612867612861600061091f565b916103a3565b036128c2575b50508061288361287d600061091f565b916103a3565b036128a2575b505061289861289e91926103a3565b916103a3565b1490565b909192909180156128bd5761289e9261289892089291612889565b6124c7565b9091949190839182156128e65709829182156128e1570892388061286d565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b5050505050600090565b5080612918612912856103a3565b916103a3565b101561282e565b50600061293461292e836103a3565b9161091f565b14612827565b508361294e612948856103a3565b916103a3565b1015612820565b91612985926129626119f7565b5061296b6119f7565b509190612976611ffe565b9161297f612053565b93612b65565b91909190565b9093916129bd95936129b19161299f6119f7565b506129a86119f7565b50908591612bac565b91949091929394612bd7565b91909190565b60007f456c6c697074696343757276653a206d6f64756c7573206973207a65726f0000910152565b6129f8601e60209261163e565b612a01816129c3565b0190565b612a1b90602081019060008183039101526129eb565b90565b15612a2557565b612a2d610073565b62461bcd60e51b815280612a4360048201612a05565b0390fd5b90565b612a5e612a59612a6392612a47565b610314565b6103a3565b90565b612a73600160ff1b612a4a565b90565b9091612a806119f7565b50612a9f81612a98612a92600061091f565b916103a3565b1415612a1e565b81612ab3612aad600061091f565b916103a3565b14612b555782612acc612ac6600061091f565b916103a3565b14612b45579190612add600161103a565b92612ae6612a66565b925b60008411612af7575050505090565b9091929382808080601094818a881615158a0a918009098160028a0487161515890a91800909816004890486161515880a91800909816008880485161515870a918009099404929190612ae8565b505050612b52600161103a565b90565b505050612b62600061091f565b90565b91612ba6949391612b9893612b786119f7565b50612b816119f7565b50909160019392612b92879561103a565b92612cdd565b929190929092909192612dfc565b91909190565b91612bcf612bd4929493612bbe6119f7565b50612bc76119f7565b5094826126a9565b6124dd565b90565b9290949391612be46119f7565b50612bed6119f7565b50612bf8600061091f565b50612c03600061091f565b50612c0e600061091f565b5083612c22612c1c836103a3565b916103a3565b14600014612ca55750849084918215612ca05708612c49612c43600061091f565b916103a3565b14600014612c6f5750505050600090612c6c612c6660009361091f565b9261091f565b90565b612c9a93612c8b9260019291612c85869461103a565b916135f6565b92919290925b92909192612dfc565b91909190565b6124c7565b915093612c9a94612cd39391906001939091600190612ccd612cc7899761103a565b9261103a565b94612ee5565b9291929092612c91565b9493929194612cea6119f7565b50612cf36119f7565b50612cfc6119f7565b5080612d11612d0b600061091f565b916103a3565b14612dee579590612d22600061091f565b95612d2d600061091f565b93612d38600161103a565b985b80612d4e612d48600061091f565b916103a3565b14612ddd5780612d5e600161103a565b16612d72612d6c600061091f565b916103a3565b03612daf575b90612d91612d9d9392612d8b6002611cc1565b90612687565b939190879189936135f6565b97919794909792979197949094612d3a565b97612d9195829a612d9d9493612dcd93929187908692938d95612ee5565b9a91969096999192935050612d78565b505050509250929050919291929190565b509150939150919291929190565b91612e1e9094939194612e0d6119f7565b50612e166119f7565b508290613874565b91828383918215612e5c5709908183918215612e57570994929082918215612e52570990918215612e4d570990565b6124c7565b6124c7565b6124c7565b6124c7565b60007f557365206a6163446f75626c652066756e6374696f6e20696e73746561640000910152565b612e96601e60209261163e565b612e9f81612e61565b0190565b612eb99060208101906000818303910152612e89565b90565b15612ec357565b612ecb610073565b62461bcd60e51b815280612ee160048201612ea3565b0390fd5b929694959693909193612ef66119f7565b50612eff6119f7565b50612f086119f7565b5083612f1d612f17600061091f565b916103a3565b14806135db575b6135cc5780612f3c612f36600061091f565b916103a3565b14806135b1575b6135a257612f4f610e32565b9285868a90811561359d57612f789209612f7386612f6d600061091f565b90611010565b610e3f565b85612f95612f9086612f8a600061091f565b90611010565b61102d565b8a90811561359857612fbb9209612fb686612fb0600161103a565b90611010565b610e3f565b87888a90811561359357612fe39209612fde86612fd86002611cc1565b90611010565b610e3f565b87613000612ffb86612ff56002611cc1565b90611010565b61102d565b8a90811561358e5761302692096130218661301b6003611c0f565b90611010565b610e3f565b6130306004610dfe565b9461304d613048866130426002611cc1565b90611010565b61102d565b8a90811561358957613063920960008701610e3f565b61307f61307a856130746003611c0f565b90611010565b61102d565b8990811561358457613095920960208601610e3f565b906130b26130ad846130a7600061091f565b90611010565b61102d565b908892831561357f576130e7936130e2936130d1920960408701610e3f565b926130dc600161103a565b90611010565b61102d565b8690811561357a576130fd920960608301610e3f565b9361311a6131158661310f600061091f565b90611010565b61102d565b61314761314161313c613137896131316002611cc1565b90611010565b61102d565b6103a3565b916103a3565b14158015613524575b61315990612ebc565b613161610e32565b9361317e613179876131736002611cc1565b90611010565b61102d565b6131a48361319e6131998a613193600061091f565b90611010565b61102d565b906126a9565b8390811561351f576131ca92086131c5876131bf600061091f565b90611010565b610e3f565b6131e66131e1876131db6003611c0f565b90611010565b61102d565b61320c836132066132018a6131fb600161103a565b90611010565b61102d565b906126a9565b8390811561351a57613232920861322d87613227600161103a565b90611010565b610e3f565b61324e61324986613243600061091f565b90611010565b61102d565b61326a6132658761325f600061091f565b90611010565b61102d565b8390811561351557613290920961328b876132856002611cc1565b90611010565b610e3f565b6132ac6132a7866132a16002611cc1565b90611010565b61102d565b6132c86132c3876132bd600061091f565b90611010565b61102d565b83908115613510576132ee92096132e9876132e36003611c0f565b90611010565b610e3f565b61330a613305866132ff600161103a565b90611010565b61102d565b6133266133218761331b600161103a565b90611010565b61102d565b8391821561350b57096133558361334f61334a896133446003611c0f565b90611010565b61102d565b906126a9565b8391821561350657088260029061337e6133798a613373600061091f565b90611010565b61102d565b61339a6133958a61338f6002611cc1565b90611010565b61102d565b869182156135015709859081156134fc576133b76133be94611cc1565b09906126a9565b839182156134f75708956133e46133df876133d9600161103a565b90611010565b61102d565b6134006133fb836133f5600061091f565b90611010565b61102d565b61341c613417896134116002611cc1565b90611010565b61102d565b859182156134f25709613430858a906126a9565b859182156134ed5708849182156134e857099061346061345b8592613455600161103a565b90611010565b61102d565b9061347d613478896134726003611c0f565b90611010565b61102d565b859081156134e3576134909309906126a9565b908380156134de576134b7926134b29208966134ac600061091f565b90611010565b61102d565b9290829182156134d95709909182156134d4570992919291929190565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b5061315961354461353f87613539600161103a565b90611010565b61102d565b61357161356b6135666135618a61355b6003611c0f565b90611010565b61102d565b6103a3565b916103a3565b14159050613150565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b50509350909350919291929190565b50816135c66135c0600061091f565b916103a3565b14612f43565b93509495505050919291929190565b50826135f06135ea600061091f565b916103a3565b14612f24565b949294939091936136056119f7565b5061360e6119f7565b506136176119f7565b508461362c613626600061091f565b916103a3565b146137ae578081839182156137a95709958384849182156137a457099186878591821561379f570990600490848691821561379a570985918215613795576136739061266b565b0997600390859182156137905761368990611c0f565b099190808591821561378b57098491821561378657098391821561378157089586878491821561377c57098382908386908115613777576136cb9308906126a9565b84918215613772570896906136e18489906126a9565b8491821561376d57088391821561376857099082600891808591821561376357098490811561375e5761371661371d94610e6c565b09906126a9565b82918215613759570893600292908291821561375457099091821561374f5761374590611cc1565b0992919291929190565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b6124c7565b9193945050919291929190565b60007f496e76616c6964206e756d626572000000000000000000000000000000000000910152565b6137f0600e60209261163e565b6137f9816137bb565b0190565b61381390602081019060008183039101526137e3565b90565b1561381d57565b613825610073565b62461bcd60e51b81528061383b600482016137fd565b0390fd5b61384e613854919392936103a3565b926103a3565b916138608382026103a3565b92818404149015171561386f57565b610f72565b61387c6119f7565b508061389161388b600061091f565b916103a3565b141580613960575b8061393f575b6138a890613816565b6138b2600061091f565b6138bc600161103a565b83906138c66119f7565b505b836138dc6138d6600061091f565b916103a3565b14613937576138ec828590612687565b81939186829188908115613932576139059309906126a9565b9186801561392d57613926936139209208949580949261383f565b906126a9565b92916138c8565b6124c7565b6124c7565b505091505090565b506138a882613957613951600061091f565b916103a3565b1415905061389f565b508061397461396e846103a3565b916103a3565b141561389956fea26469706673582212209fe46907a360bdcd003162b00c61c41e0c83fc816ceb1f1746c66fdd846d5f2464736f6c634300081e0033",
}

// VerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use VerifierMetaData.ABI instead.
var VerifierABI = VerifierMetaData.ABI

// VerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use VerifierMetaData.Bin instead.
var VerifierBin = VerifierMetaData.Bin

// DeployVerifier deploys a new Ethereum contract, binding an instance of Verifier to it.
func DeployVerifier(auth *bind.TransactOpts, backend bind.ContractBackend, _bloom common.Address) (common.Address, *types.Transaction, *Verifier, error) {
	parsed, err := VerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VerifierBin), backend, _bloom)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// Verifier is an auto generated Go binding around an Ethereum contract.
type Verifier struct {
	VerifierCaller     // Read-only binding to the contract
	VerifierTransactor // Write-only binding to the contract
	VerifierFilterer   // Log filterer for contract events
}

// VerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type VerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VerifierSession struct {
	Contract     *Verifier         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VerifierCallerSession struct {
	Contract *VerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// VerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VerifierTransactorSession struct {
	Contract     *VerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// VerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type VerifierRaw struct {
	Contract *Verifier // Generic contract binding to access the raw methods on
}

// VerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VerifierCallerRaw struct {
	Contract *VerifierCaller // Generic read-only contract binding to access the raw methods on
}

// VerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VerifierTransactorRaw struct {
	Contract *VerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVerifier creates a new instance of Verifier, bound to a specific deployed contract.
func NewVerifier(address common.Address, backend bind.ContractBackend) (*Verifier, error) {
	contract, err := bindVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// NewVerifierCaller creates a new read-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierCaller(address common.Address, caller bind.ContractCaller) (*VerifierCaller, error) {
	contract, err := bindVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierCaller{contract: contract}, nil
}

// NewVerifierTransactor creates a new write-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*VerifierTransactor, error) {
	contract, err := bindVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierTransactor{contract: contract}, nil
}

// NewVerifierFilterer creates a new log filterer instance of Verifier, bound to a specific deployed contract.
func NewVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*VerifierFilterer, error) {
	contract, err := bindVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VerifierFilterer{contract: contract}, nil
}

// bindVerifier binds a generic wrapper to an already deployed contract.
func bindVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := VerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.VerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transact(opts, method, params...)
}

// Bloom is a free data retrieval call binding the contract method 0xd26da14f.
//
// Solidity: function bloom() view returns(address)
func (_Verifier *VerifierCaller) Bloom(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "bloom")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bloom is a free data retrieval call binding the contract method 0xd26da14f.
//
// Solidity: function bloom() view returns(address)
func (_Verifier *VerifierSession) Bloom() (common.Address, error) {
	return _Verifier.Contract.Bloom(&_Verifier.CallOpts)
}

// Bloom is a free data retrieval call binding the contract method 0xd26da14f.
//
// Solidity: function bloom() view returns(address)
func (_Verifier *VerifierCallerSession) Bloom() (common.Address, error) {
	return _Verifier.Contract.Bloom(&_Verifier.CallOpts)
}

// CheckCredential is a free data retrieval call binding the contract method 0xa9b64827.
//
// Solidity: function checkCredential(bytes pubKey, bytes signature, bytes token) view returns(bool valid, uint8 errorCode, bytes32 pubKeyHash, address issuerAddress)
func (_Verifier *VerifierCaller) CheckCredential(opts *bind.CallOpts, pubKey []byte, signature []byte, token []byte) (struct {
	Valid         bool
	ErrorCode     uint8
	PubKeyHash    [32]byte
	IssuerAddress common.Address
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "checkCredential", pubKey, signature, token)

	outstruct := new(struct {
		Valid         bool
		ErrorCode     uint8
		PubKeyHash    [32]byte
		IssuerAddress common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Valid = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ErrorCode = *abi.ConvertType(out[1], new(uint8)).(*uint8)
	outstruct.PubKeyHash = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)
	outstruct.IssuerAddress = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// CheckCredential is a free data retrieval call binding the contract method 0xa9b64827.
//
// Solidity: function checkCredential(bytes pubKey, bytes signature, bytes token) view returns(bool valid, uint8 errorCode, bytes32 pubKeyHash, address issuerAddress)
func (_Verifier *VerifierSession) CheckCredential(pubKey []byte, signature []byte, token []byte) (struct {
	Valid         bool
	ErrorCode     uint8
	PubKeyHash    [32]byte
	IssuerAddress common.Address
}, error) {
	return _Verifier.Contract.CheckCredential(&_Verifier.CallOpts, pubKey, signature, token)
}

// CheckCredential is a free data retrieval call binding the contract method 0xa9b64827.
//
// Solidity: function checkCredential(bytes pubKey, bytes signature, bytes token) view returns(bool valid, uint8 errorCode, bytes32 pubKeyHash, address issuerAddress)
func (_Verifier *VerifierCallerSession) CheckCredential(pubKey []byte, signature []byte, token []byte) (struct {
	Valid         bool
	ErrorCode     uint8
	PubKeyHash    [32]byte
	IssuerAddress common.Address
}, error) {
	return _Verifier.Contract.CheckCredential(&_Verifier.CallOpts, pubKey, signature, token)
}

// CheckCredentialVrfDebug is a free data retrieval call binding the contract method 0xe831d28e.
//
// Solidity: function checkCredentialVrfDebug(bytes pubKey, bytes signature, bytes proof, uint256 epoch) view returns(bool valid, uint8 errorCode, bytes32 pubKeyHash, address issuerAddress, uint256[2] pubkeyXY, uint256[4] decodedProof, bytes32 token)
func (_Verifier *VerifierCaller) CheckCredentialVrfDebug(opts *bind.CallOpts, pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (struct {
	Valid         bool
	ErrorCode     uint8
	PubKeyHash    [32]byte
	IssuerAddress common.Address
	PubkeyXY      [2]*big.Int
	DecodedProof  [4]*big.Int
	Token         [32]byte
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "checkCredentialVrfDebug", pubKey, signature, proof, epoch)

	outstruct := new(struct {
		Valid         bool
		ErrorCode     uint8
		PubKeyHash    [32]byte
		IssuerAddress common.Address
		PubkeyXY      [2]*big.Int
		DecodedProof  [4]*big.Int
		Token         [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Valid = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ErrorCode = *abi.ConvertType(out[1], new(uint8)).(*uint8)
	outstruct.PubKeyHash = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)
	outstruct.IssuerAddress = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.PubkeyXY = *abi.ConvertType(out[4], new([2]*big.Int)).(*[2]*big.Int)
	outstruct.DecodedProof = *abi.ConvertType(out[5], new([4]*big.Int)).(*[4]*big.Int)
	outstruct.Token = *abi.ConvertType(out[6], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// CheckCredentialVrfDebug is a free data retrieval call binding the contract method 0xe831d28e.
//
// Solidity: function checkCredentialVrfDebug(bytes pubKey, bytes signature, bytes proof, uint256 epoch) view returns(bool valid, uint8 errorCode, bytes32 pubKeyHash, address issuerAddress, uint256[2] pubkeyXY, uint256[4] decodedProof, bytes32 token)
func (_Verifier *VerifierSession) CheckCredentialVrfDebug(pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (struct {
	Valid         bool
	ErrorCode     uint8
	PubKeyHash    [32]byte
	IssuerAddress common.Address
	PubkeyXY      [2]*big.Int
	DecodedProof  [4]*big.Int
	Token         [32]byte
}, error) {
	return _Verifier.Contract.CheckCredentialVrfDebug(&_Verifier.CallOpts, pubKey, signature, proof, epoch)
}

// CheckCredentialVrfDebug is a free data retrieval call binding the contract method 0xe831d28e.
//
// Solidity: function checkCredentialVrfDebug(bytes pubKey, bytes signature, bytes proof, uint256 epoch) view returns(bool valid, uint8 errorCode, bytes32 pubKeyHash, address issuerAddress, uint256[2] pubkeyXY, uint256[4] decodedProof, bytes32 token)
func (_Verifier *VerifierCallerSession) CheckCredentialVrfDebug(pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (struct {
	Valid         bool
	ErrorCode     uint8
	PubKeyHash    [32]byte
	IssuerAddress common.Address
	PubkeyXY      [2]*big.Int
	DecodedProof  [4]*big.Int
	Token         [32]byte
}, error) {
	return _Verifier.Contract.CheckCredentialVrfDebug(&_Verifier.CallOpts, pubKey, signature, proof, epoch)
}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() view returns(address)
func (_Verifier *VerifierCaller) Issuer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "issuer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() view returns(address)
func (_Verifier *VerifierSession) Issuer() (common.Address, error) {
	return _Verifier.Contract.Issuer(&_Verifier.CallOpts)
}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() view returns(address)
func (_Verifier *VerifierCallerSession) Issuer() (common.Address, error) {
	return _Verifier.Contract.Issuer(&_Verifier.CallOpts)
}

// Update is a paid mutator transaction binding the contract method 0xe9b2cd3f.
//
// Solidity: function update(bytes[] newFilters, uint256[] ks, uint256[] bitLens) returns()
func (_Verifier *VerifierTransactor) Update(opts *bind.TransactOpts, newFilters [][]byte, ks []*big.Int, bitLens []*big.Int) (*types.Transaction, error) {
	return _Verifier.contract.Transact(opts, "update", newFilters, ks, bitLens)
}

// Update is a paid mutator transaction binding the contract method 0xe9b2cd3f.
//
// Solidity: function update(bytes[] newFilters, uint256[] ks, uint256[] bitLens) returns()
func (_Verifier *VerifierSession) Update(newFilters [][]byte, ks []*big.Int, bitLens []*big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.Update(&_Verifier.TransactOpts, newFilters, ks, bitLens)
}

// Update is a paid mutator transaction binding the contract method 0xe9b2cd3f.
//
// Solidity: function update(bytes[] newFilters, uint256[] ks, uint256[] bitLens) returns()
func (_Verifier *VerifierTransactorSession) Update(newFilters [][]byte, ks []*big.Int, bitLens []*big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.Update(&_Verifier.TransactOpts, newFilters, ks, bitLens)
}
