// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package verifier

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// VerifierMetaData contains all meta data concerning the Verifier contract.
var VerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bloom\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bloom\",\"outputs\":[{\"internalType\":\"contractCascadingBloomFilter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"checkCredential\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"errorCode\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"uPoint\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"vComponents\",\"type\":\"uint256[4]\"}],\"name\":\"checkCredentialFast\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"errorCode\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getFastVerifyParams\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"uPoint\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"vComponents\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"uPoint\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"vComponents\",\"type\":\"uint256[4]\"}],\"name\":\"measureCheckCredentialFastGas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"errorCode\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"measureCheckCredentialGas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"errorCode\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"newFilters\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bitLens\",\"type\":\"uint256[]\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523461002f576100196100146100fa565b6101dd565b610021610034565b6145436101fe823961454390f35b61003a565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100699061003f565b810190811060018060401b0382111761008157604052565b610049565b90610099610092610034565b928361005f565b565b600080fd5b60018060a01b031690565b6100b4906100a0565b90565b6100c0816100ab565b036100c757565b600080fd5b905051906100d9826100b7565b565b906020828203126100f5576100f2916000016100cc565b90565b61009b565b6101186147418038038061010d81610086565b9283398101906100db565b90565b90565b61013261012d610137926100a0565b61011b565b6100a0565b90565b6101439061011e565b90565b61014f9061013a565b90565b60001b90565b9061016960018060a01b0391610152565b9181191691161790565b61017c9061013a565b90565b90565b9061019761019261019e92610173565b61017f565b8254610158565b9055565b6101ab9061011e565b90565b6101b7906101a2565b90565b90565b906101d26101cd6101d9926101ae565b6101ba565b8254610158565b9055565b6101e96101f091610146565b6000610182565b6101fb3360016101bd565b56fe60806040526004361015610013575b610863565b61001e60003561009d565b80631d143848146100985780635f1c7a211461009357806379c3faf91461008e57806383a5cc32146100895780639e93651e14610084578063d26da14f1461007f578063e9b2cd3f1461007a5763eafa217e0361000e57610826565b6107ec565b6106ac565b6105d3565b610593565b61047c565b6102d0565b610142565b60e01c90565b60405190565b600080fd5b600080fd5b60009103126100be57565b6100ae565b1c90565b60018060a01b031690565b6100e29060086100e793026100c3565b6100c7565b90565b906100f591546100d2565b90565b61010560016000906100ea565b90565b60018060a01b031690565b61011c90610108565b90565b61012890610113565b9052565b91906101409060006020850194019061011f565b565b34610172576101523660046100b3565b61016e61015d6100f8565b6101656100a3565b9182918261012c565b0390f35b6100a9565b600080fd5b600080fd5b600080fd5b600080fd5b909182601f830112156101c55781359167ffffffffffffffff83116101c05760200192600183028401116101bb57565b610186565b610181565b61017c565b90565b6101d6816101ca565b036101dd57565b600080fd5b905035906101ef826101cd565b565b9160808383031261028257600083013567ffffffffffffffff811161027d578261021c91850161018b565b929093602081013567ffffffffffffffff8111610278578261023f91830161018b565b929093604083013567ffffffffffffffff8111610273576102658361027092860161018b565b9390946060016101e2565b90565b610177565b610177565b610177565b6100ae565b151590565b61029590610287565b9052565b60ff1690565b6102a890610299565b9052565b9160206102ce9294936102c76040820196600083019061028c565b019061029f565b565b34610308576102ef6102e33660046101f1565b95949094939193610872565b906103046102fb6100a3565b928392836102ac565b0390f35b6100a9565b60608183031261037557600081013567ffffffffffffffff8111610370578261033791830161018b565b929093602083013567ffffffffffffffff811161036b5761035d8361036892860161018b565b9390946040016101e2565b90565b610177565b610177565b6100ae565b50600290565b905090565b90565b610391906101ca565b9052565b906103a281602093610388565b0190565b60200190565b6103c86103c26103bb8361037a565b8094610380565b91610385565b6000915b8383106103d95750505050565b6103ef6103e96001928451610395565b926103a6565b920191906103cc565b50600490565b905090565b90565b60200190565b61042861042261041b836103f8565b80946103fe565b91610403565b6000915b8383106104395750505050565b61044f6104496001928451610395565b92610406565b9201919061042c565b91604061047a92949361047360c082019660008301906103ac565b019061040c565b565b346104b15761049861048f36600461030d565b93929092610c27565b906104ad6104a46100a3565b92839283610458565b0390f35b6100a9565b919060206002028301116104c657565b610186565b919060206004028301116104db57565b610186565b906101408282031261058e57600082013567ffffffffffffffff8111610589578161050c91840161018b565b929093602082013567ffffffffffffffff8111610584578361052f91840161018b565b929093604082013567ffffffffffffffff811161057f578161055291840161018b565b92909361057c61056584606085016101e2565b9361057381608086016104b6565b9360c0016104cb565b90565b610177565b610177565b610177565b6100ae565b346105ce576105b56105a63660046104e0565b979690969591959492946111d2565b906105ca6105c16100a3565b928392836102ac565b0390f35b6100a9565b3461060e576105f56105e63660046104e0565b9796909695919594929461155e565b9061060a6106016100a3565b928392836102ac565b0390f35b6100a9565b60018060a01b031690565b61062e90600861063393026100c3565b610613565b90565b90610641915461061e565b90565b61064f600080610636565b90565b90565b61066961066461066e92610108565b610652565b610108565b90565b61067a90610655565b90565b61068690610671565b90565b6106929061067d565b9052565b91906106aa90600060208501940190610689565b565b346106dc576106bc3660046100b3565b6106d86106c7610644565b6106cf6100a3565b91829182610696565b0390f35b6100a9565b909182601f8301121561071b5781359167ffffffffffffffff831161071657602001926020830284011161071157565b610186565b610181565b61017c565b909182601f8301121561075a5781359167ffffffffffffffff831161075557602001926020830284011161075057565b610186565b610181565b61017c565b906060828203126107e157600082013567ffffffffffffffff81116107dc578161078a9184016106e1565b929093602082013567ffffffffffffffff81116107d757836107ad918401610720565b929093604082013567ffffffffffffffff81116107d2576107ce9201610720565b9091565b610177565b610177565b610177565b6100ae565b60000190565b346108215761080b6107ff36600461075f565b94939093929192611897565b6108136100a3565b8061081d816107e6565b0390f35b6100a9565b3461085e576108456108393660046101f1565b959490949391936118a7565b9061085a6108516100a3565b928392836102ac565b0390f35b6100a9565b600080fd5b600090565b600090565b9161089b96949295939195610885610868565b5061088e61086d565b50959091929394956118a7565b91909190565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906108cb906108a1565b810190811067ffffffffffffffff8211176108e557604052565b6108ab565b906108fd6108f66100a3565b92836108c1565b565b67ffffffffffffffff81116109145760200290565b6108ab565b61092561092a916108ff565b6108ea565b90565b369037565b9061095061093f83610919565b9261094a84916108ff565b9061092d565b565b61095c6002610932565b90565b67ffffffffffffffff81116109745760200290565b6108ab565b61098561098a9161095f565b6108ea565b90565b906109ab61099a83610979565b926109a5849161095f565b9061092d565b565b6109b7600461098d565b90565b600080fd5b67ffffffffffffffff81116109dd576109d96020916108a1565b0190565b6108ab565b90826000939282370152565b90929192610a036109fe826109bf565b6108ea565b93818552602085019082840111610a1f57610a1d926109e2565b565b6109ba565b610a2f9136916109ee565b90565b90565b610a49610a44610a4e92610a32565b610652565b6101ca565b90565b90610a63610a5e836109bf565b6108ea565b918252565b369037565b90610a92610a7a83610a51565b92602080610a8886936109bf565b9201910390610a68565b565b90565b610aab610aa6610ab092610a94565b610652565b610299565b90565b6001610abf9101610299565b90565b610ad6610ad1610adb92610a32565b610652565b610299565b90565b634e487b7160e01b600052601160045260246000fd5b610b00610b0691610299565b91610299565b0290610b1182610299565b918203610b1a57565b610ade565b610b3e90610b38610b32610b4394610299565b916101ca565b906100c3565b6101ca565b90565b610b5a610b55610b5f926101ca565b610652565b610299565b90565b60ff60f81b1690565b60f81b90565b610b85610b80610b8a92610299565b610b6b565b610b62565b90565b90565b610ba4610b9f610ba992610b8d565b610652565b610299565b90565b610bb8610bbe91610299565b91610299565b90039060ff8211610bcb57565b610ade565b634e487b7160e01b600052603260045260246000fd5b5190565b90610bf482610be6565b811015610c0657600160209102010190565b610bd0565b610c1f610c1a610c2492610299565b610652565b6101ca565b90565b92610c55610c50610c5b93610c6095979896610c41610952565b50610c4a6109ad565b50610a24565b611cd1565b94610a24565b611e25565b90610c73610c6e6008610a35565b610a6d565b91610c7e6000610a97565b5b80610c93610c8d6008610ac2565b91610299565b1015610d0157610cfc90610ccb610cc6610cc189610cbb85610cb56008610ac2565b90610af4565b90610b1f565b610b46565b610b71565b610cf686610cf0610ce66007610ce18791610b90565b610bac565b9360001a93610c0b565b90610bea565b53610ab3565b610c7f565b5091909350610d1292919091611fcf565b91909190565b5090565b90565b610d33610d2e610d3892610d1c565b610652565b6101ca565b90565b90565b610d52610d4d610d5792610d3b565b610652565b610299565b90565b60200190565b9190811015610d70576001020190565b610bd0565b90565b610d8c610d87610d9192610d75565b610652565b6101ca565b90565b60f81c90565b610dae610da9610db392610299565b610652565b610299565b90565b610dc2610dc791610d94565b610d9a565b90565b610dde610dd9610de392610a94565b610652565b6101ca565b90565b90565b610dfd610df8610e0292610de6565b610652565b6101ca565b90565b600080fd5b600080fd5b90939293848311610e2f578411610e2a576001820201920390565b610e0a565b610e05565b90565b1b90565b90610e49610e509183610d18565b9135610e34565b9060208110610e5e575b5090565b610e719060001990602003600802610e37565b1638610e5a565b60001b90565b610e8790610e34565b9052565b610ec1610ec894610eb7606094989795610ead608086019a6000870190610e7e565b602085019061029f565b6040830190610e7e565b0190610e7e565b565b610ed26100a3565b3d6000823e3d90fd5b60001c90565b610eed610ef291610edb565b6100c7565b90565b610eff9054610ee1565b90565b90565b610f19610f14610f1e92610f02565b610652565b610299565b90565b90929192610f36610f31826108ff565b6108ea565b936020859202830192818411610f6e57915b838310610f555750505050565b60208091610f6384866101e2565b815201920191610f48565b610186565b610f809060023691610f21565b90565b90929192610f98610f938261095f565b6108ea565b936020859202830192818411610fd057915b838310610fb75750505050565b60208091610fc584866101e2565b815201920191610faa565b610186565b610fe29060043691610f83565b90565b90565b610ffc610ff761100192610fe5565b610652565b610299565b90565b9061100e826103f8565b81101561101c576020020190565b610bd0565b61102b90516101ca565b90565b61104261103d61104792610d3b565b610652565b6101ca565b90565b61105661105b91610edb565b610613565b90565b611068905461104a565b90565b90565b61107a61107f91610e34565b61106b565b9052565b61108f8160209361106e565b0190565b600080fd5b60e01b90565b6110a781610287565b036110ae57565b600080fd5b905051906110c08261109e565b565b905051906110cf826101cd565b565b91906040838203126110fa57806110ee6110f792600086016110b3565b936020016110c2565b90565b6100ae565b60209181520190565b60005b83811061111c575050906000910152565b80602091830151818501520161110b565b61114c61115560209361115a9361114381610be6565b938480936110ff565b95869101611108565b6108a1565b0190565b611174916020820191600081840391015261112d565b90565b61118090610287565b90565b61119261119891939293611177565b92610a97565b90565b90565b6111b26111ad6111b79261119b565b610652565b610299565b90565b6111c96111cf91939293611177565b9261119e565b90565b91989598979493979290926111e5610868565b506111ee61086d565b506111fa818390610d18565b61120d6112076041610d1f565b916101ca565b03611544576020916000916112c6611226868890610a24565b61123861123282610be6565b91610d5a565b20916112b46112ae61126661126161125b85896112556040610d78565b91610d60565b35610b62565b610db6565b9561129061128a85838b9061128461127e8f93610dca565b92610de9565b92610e0f565b90610e3b565b939089906112a86112a2604093610de9565b92610d78565b92610e0f565b90610e3b565b906112bd6100a3565b94859485610e8b565b838052039060015afa1561153f576112df600051610e78565b6112fa6112f46112ef6001610ef5565b610113565b91610113565b03611527579161131861131361131e9361132395610a24565b611cd1565b96610a24565b611e25565b906113366113316008610a35565b610a6d565b936113416000610a97565b5b806113566113506008610ac2565b91610299565b10156113c4576113bf9061138e6113896113848b61137e856113786008610ac2565b90610af4565b90610b1f565b610b46565b610b71565b6113b9886113b36113a960076113a48791610b90565b610bac565b9360001a93610c0b565b90610bea565b53610ab3565b611342565b506113ec9396506113f2949295926113e66113e0889293610f73565b93610fd5565b936121e5565b15610287565b6115165760406114736114408361143a61143561142461141f6114a1986114196000610dca565b90611004565b611021565b9261142f600161102e565b90611004565b611021565b906125e0565b611496611455611450600061105e565b61067d565b9161148263d423db2a916114676100a3565b95869160208301611083565b602082018103825203856108c1565b61148a6100a3565b95869485938493611098565b83526004830161115e565b03915afa908115611511576000916114e4575b506000146114d0576114c960006004906111ba565b91905b9190565b6114dd6001600090611183565b91906114cc565b611505915060403d811161150a575b6114fd81836108c1565b8101906110d1565b6114b4565b503d6114f3565b610eca565b506000906115246003610fe8565b90565b505050509250505060009061153c6002610f05565b90565b610eca565b5050505050509250505060009061155b6001610d3e565b90565b9161158b989694929795939197611573610868565b5061157c61086d565b509790919293949596976111d2565b91909190565b60209181520190565b60007f4e6f742069737375657200000000000000000000000000000000000000000000910152565b6115cf600a602092611591565b6115d88161159a565b0190565b6115f290602081019060008183039101526115c2565b90565b156115fc57565b6116046100a3565b62461bcd60e51b81528061161a600482016115dc565b0390fd5b90611651959493929161164c3361164661164061163b6001610ef5565b610113565b91610113565b146115f5565b6117f7565b565b600091031261165e57565b6100ae565b60209181520190565b90565b60209181520190565b91906116928161168b816116979561166f565b80956109e2565b6108a1565b0190565b906116a69291611678565b90565b600080fd5b600080fd5b600080fd5b90356001602003823603038112156116f957016020813591019167ffffffffffffffff82116116f45760018202360383136116ef57565b6116ae565b6116a9565b6116b3565b60200190565b918161170f91611663565b90816117206020830284019461166c565b92836000925b8484106117365750505050505090565b909192939495602061176261175c83856001950388526117568b886116b8565b9061169b565b986116fe565b940194019294939190611726565b60209181520190565b600080fd5b9037565b90918261178e91611770565b9160018060fb1b0381116117b157829160206117ad920293849161177e565b0190565b611779565b949290936117d86117f497956117e694606089019189830360008b0152611704565b918683036020880152611782565b926040818503910152611782565b90565b919490929361180e611809600061105e565b61067d565b9263b163337d90949695919295843b156118925760009661184394889461184e936118376100a3565b9b8c9a8b998a98611098565b8852600488016117b6565b03925af1801561188d57611860575b50565b6118809060003d8111611886575b61187881836108c1565b810190611653565b3861185d565b503d61186e565b610eca565b611093565b906118a5959493929161161e565b565b9196949395969290926118b8610868565b506118c161086d565b506118cd818390610d18565b6118e06118da6041610d1f565b916101ca565b03611c03576020916000916119996118f9868890610a24565b61190b61190582610be6565b91610d5a565b209161198761198161193961193461192e85896119286040610d78565b91610d60565b35610b62565b610db6565b9561196361195d85838b906119576119518f93610dca565b92610de9565b92610e0f565b90610e3b565b9390899061197b611975604093610de9565b92610d78565b92610e0f565b90610e3b565b906119906100a3565b94859485610e8b565b838052039060015afa15611bfe576119b2600051610e78565b6119cd6119c76119c26001610ef5565b610113565b91610113565b03611be857916119eb6119e66119f1936119f695610a24565b611cd1565b94610a24565b611e25565b90611a09611a046008610a35565b610a6d565b91611a146000610a97565b5b80611a29611a236008610ac2565b91610299565b1015611a9757611a9290611a61611a5c611a5789611a5185611a4b6008610ac2565b90610af4565b90610b1f565b610b46565b610b71565b611a8c86611a86611a7c6007611a778791610b90565b610bac565b9360001a93610c0b565b90610bea565b53610ab3565b611a15565b5092611aad91945091611ab39290849091612666565b15610287565b611bd7576040611b34611b0183611afb611af6611ae5611ae0611b6298611ada6000610dca565b90611004565b611021565b92611af0600161102e565b90611004565b611021565b906125e0565b611b57611b16611b11600061105e565b61067d565b91611b4363d423db2a91611b286100a3565b95869160208301611083565b602082018103825203856108c1565b611b4b6100a3565b95869485938493611098565b83526004830161115e565b03915afa908115611bd257600091611ba5575b50600014611b9157611b8a60006004906111ba565b91905b9190565b611b9e6001600090611183565b9190611b8d565b611bc6915060403d8111611bcb575b611bbe81836108c1565b8101906110d1565b611b75565b503d611bb4565b610eca565b50600090611be56003610fe8565b90565b505050915050600090611bfb6002610f05565b90565b610eca565b5050505050915050600090611c186001610d3e565b90565b90565b611c32611c2d611c3792611c1b565b610652565b6101ca565b90565b60007f4d616c666f726d656420636f6d7072657373656420454320706f696e74000000910152565b611c6f601d602092611591565b611c7881611c3a565b0190565b611c929060208101906000818303910152611c62565b90565b15611c9c57565b611ca46100a3565b62461bcd60e51b815280611cba60048201611c7c565b0390fd5b600090565b90611ccd906101ca565b9052565b611cd9610952565b50611cff611ce682610be6565b611cf9611cf36021611c1e565b916101ca565b14611c95565b611d0761086d565b50611d10611cbe565b50611d49611d2960216001840151930151928390612835565b611d40611d366002610919565b9360008501611cc3565b60208301611cc3565b90565b90565b611d63611d5e611d6892611d4c565b610652565b6101ca565b90565b60007f4d616c666f726d6564205652462070726f6f6600000000000000000000000000910152565b611da06013602092611591565b611da981611d6b565b0190565b611dc39060208101906000818303910152611d93565b90565b15611dcd57565b611dd56100a3565b62461bcd60e51b815280611deb60048201611dad565b0390fd5b600090565b6fffffffffffffffffffffffffffffffff1690565b611e1d611e18611e2292611df4565b610652565b6101ca565b90565b602090611e306109ad565b50611e56611e3d82610be6565b611e50611e4a6051611d4f565b916101ca565b14611dc6565b611e5e61086d565b50611e67611cbe565b50611e70611def565b50611e79611cbe565b5001611ee1815160001a611ed8611ecf600185015194611eca611eaa6031602184015160801c930151958890612835565b611ec1611eb76004610979565b9860008a01611cc3565b60208801611cc3565b611e09565b60408501611cc3565b60608301611cc3565b90565b611ef8611ef3611efd92610fe5565b610652565b6101ca565b90565b90565b611f17611f12611f1c92611f00565b610652565b6101ca565b90565b611f487f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798611f03565b90565b90565b611f62611f5d611f6792611f4b565b610652565b6101ca565b90565b611f937f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8611f4e565b90565b611faa611fa5611faf92610f02565b610652565b6101ca565b90565b90611fbc8261037a565b811015611fca576020020190565b610bd0565b61216e9061216561213b61215c6120906120b8612003612117989a99611ff3610952565b50611ffc6109ad565b508761299c565b9290929661202361201e8d6120186003611ee4565b90611004565b611021565b9061202c611f1f565b8d61205161204c61203b611f6a565b926120466002611f96565b90611004565b611021565b9161208a61208561207461206f876120696000610dca565b90611fb2565b611021565b9561207f600161102e565b90611fb2565b611021565b94612b33565b929092966120b06120ab8d6120a56003611ee4565b90611004565b611021565b919091612b8b565b979097996120d86120d3826120cd6002611f96565b90611004565b611021565b9061211161210c6120fb6120f6846120f06000610dca565b90611004565b611021565b92612106600161102e565b90611004565b611021565b91612b8b565b939093956121326121286002610919565b9360008501611cc3565b60208301611cc3565b976121536121496004610979565b9760008901611cc3565b60208701611cc3565b60408501611cc3565b60608301611cc3565b90565b61217b6000610dca565b90565b90565b61219561219061219a9261217e565b610652565b6101ca565b90565b6121ac6401000003d019612181565b90565b60801c90565b6121c96121c46121ce92611df4565b610652565b611df4565b90565b6121dd6121e2916121af565b6121b5565b90565b9093916122bd6122016122b7926121fa610868565b508461299c565b9290929361222161221c896122166003611ee4565b90611004565b611021565b9061223e6122398a6122336002611f96565b90611004565b611021565b9061227761227261226161225c846122566000610dca565b90611fb2565b611021565b9261226c600161102e565b90611fb2565b611021565b9061229461228f8b6122896000610dca565b90611fb2565b611021565b926122b16122ac8c6122a6600161102e565b90611fb2565b611021565b94612cb5565b15610287565b80156124ca575b8015612425575b61241b576123f66123f161240c936124079361241797612372886123046122ff6124119b6122f96000610dca565b90611004565b611021565b9061232161231c82612316600161102e565b90611004565b611021565b9061235a61235561234461233f846123396002611f96565b90611004565b611021565b9261234f6003611ee4565b90611004565b611021565b90612363612171565b9261236c61219d565b94612f3f565b91909192938b6123b06123ab61239a6123958461238f6000610dca565b90611004565b611021565b926123a5600161102e565b90611004565b611021565b916123e96123e46123d36123ce876123c86000610dca565b90611fb2565b611021565b956123de600161102e565b90611fb2565b611021565b949596612fc2565b6121d1565b946124016002611f96565b90611004565b611021565b6101ca565b91611e09565b1490565b5050505050600090565b506124c56124bf6124486124438861243d6002611f96565b90611004565b611021565b61246461245f896124596000610dca565b90611004565b611021565b61248061247b8a612475600161102e565b90611004565b611021565b61249c612497896124916002611f96565b90611004565b611021565b916124b96124b48a6124ae6003611ee4565b90611004565b611021565b93612e61565b15610287565b6122cb565b5061253461252e6124ed6124e8886124e26003611ee4565b90611004565b611021565b838561250b612506896125006000610dca565b90611004565b611021565b916125286125238a61251d600161102e565b90611004565b611021565b93612e61565b15610287565b6122c4565b600090565b90565b61255561255061255a9261253e565b610652565b610299565b90565b61256690610b6b565b90565b61257561257a91610299565b61255d565b9052565b905090565b6125a861259f9260209261259681610be6565b9485809361257e565b93849101611108565b0190565b916125ca6001846125c26125d197968396612569565b018092612569565b0190612583565b90565b6125dd91612583565b90565b6126486000916126376020946125f4612539565b5061262961261661260560fe612541565b926126106003610fe8565b956130df565b61261e6100a3565b9485938985016125ac565b8682018103825203826108c1565b61263f6100a3565b918291826125d4565b039060025afa156126615761265e600051610e78565b90565b610eca565b6127fd6127f86127e76127e26128029461271d87612691612808999a61268a610868565b508461299c565b929092936126b16126ac846126a66003611ee4565b90611004565b611021565b906126ba611f1f565b6126c2611f6a565b6126de6126d9876126d36002611f96565b90611004565b611021565b916127176127126127016126fc876126f66000610dca565b90611fb2565b611021565b9561270c600161102e565b90611fb2565b611021565b94612b33565b9061279b61273d612738856127326003611ee4565b90611004565b611021565b858761275b612756886127506002611f96565b90611004565b611021565b906127786127738961276d6000610dca565b90611004565b611021565b926127956127908a61278a600161102e565b90611004565b611021565b94612b33565b93909394956127d86127d36127c26127bd856127b76000610dca565b90611004565b611021565b936127cd600161102e565b90611004565b611021565b9293949596612fc2565b6121d1565b946127f26002611f96565b90611004565b611021565b6101ca565b91611e09565b1490565b61282061281b61282592610b8d565b610652565b6101ca565b90565b612832600761280c565b90565b9061286391612842611cbe565b509061284c612171565b612854612828565b9161285d61219d565b9361322d565b90565b61288f9261288860018361288082956128959a9997612569565b018092612569565b0190612583565b90612583565b90565b6128a190610299565b60ff81146128af5760010190565b610ade565b61ffff1690565b6128cf6128ca6128d492610299565b610652565b6128b4565b90565b90565b6128ee6128e96128f3926128d7565b610652565b6128b4565b90565b61290661290d9160019493612583565b8092612569565b0190565b61292561292061292a926101ca565b610652565b6101ca565b90565b61293961293e91610edb565b612911565b90565b60007f4e6f2076616c696420706f696e742077617320666f756e640000000000000000910152565b6129766018602092611591565b61297f81612941565b0190565b6129999060208101906000818303910152612969565b90565b90612a30906129a9611cbe565b506129b2611cbe565b50612a216129c060fe612541565b91612a0d6129ce6001610d3e565b95612a07612a026129f16129ec846129e66000610dca565b90611fb2565b611021565b926129fc600161102e565b90611fb2565b611021565b906130df565b612a156100a3565b95869460208601612866565b602082018103825203826108c1565b612a3a6000610a97565b5b80612a50612a4a6101006128da565b916128bb565b1015612b115760206000612a9884612a878591612a79612a6e6100a3565b9384928884016128f6565b8682018103825203826108c1565b612a8f6100a3565b918291826125d4565b039060025afa15612b0c57612ab6612ab1600051610e78565b61292d565b612aca6002612ac58391610f05565b612835565b90612aef8183612ad8612171565b612ae0612828565b91612ae961219d565b93613355565b612b03575050612afe90612898565b612a3b565b91509291509190565b610eca565b612b196100a3565b62461bcd60e51b815280612b2f60048201612983565b0390fd5b612b8595939491612b6893612b5c92612b4a611cbe565b50612b53611cbe565b50919091612b8b565b93909394919091612b8b565b919091909291612b76612171565b92612b7f61219d565b94612f3f565b91909190565b91612bbb92612b98611cbe565b50612ba1611cbe565b509190612bac612171565b91612bb561219d565b936134b4565b91909190565b90565b612bd8612bd3612bdd92612bc1565b610652565b6101ca565b90565b612bfb70014551231950b75fc4402da1732fc9bebe19612bc4565b90565b612c0d612c13919392936101ca565b926101ca565b8203918211612c1e57565b610ade565b634e487b7160e01b600052601260045260246000fd5b612c45612c4b916101ca565b916101ca565b908115612c56570690565b612c23565b612c6f612c6a612c74926101ca565b610e78565b610e34565b90565b90565b612c8e612c89612c9392612c77565b610652565b610299565b90565b90565b612cad612ca8612cb292612c96565b610652565b610299565b90565b612cd9612ce79196959694929394612ccb610868565b50612cd4612be0565b612bfe565b612ce1612be0565b90612c39565b83612cf0612be0565b908115612df457612d15612d2992612d2392612d3a950995612d10612be0565b612bfe565b612d1d612be0565b90612c39565b93612c5b565b91612d346002611f96565b90612c39565b612d4d612d476000610dca565b916101ca565b1415600014612de457612d60601c612c99565b905b612d6b84612c5b565b9293612d75612be0565b938415612ddf57612d8f600095612da19360209809612c5b565b90612d986100a3565b94859485610e8b565b838052039060015afa15612dda57612dd0612dca612dd692612dc4600051610e78565b9461353a565b92610113565b91610113565b1490565b610eca565b612c23565b612dee601b612c7a565b90612d62565b612c23565b612e0d612e08612e1292610a94565b610e78565b610e34565b90565b612e1e90612df9565b9052565b612e58612e5f94612e4e606094989795612e44608086019a6000870190612e15565b602085019061029f565b6040830190610e7e565b0190610e7e565b565b9091939293612e6e610868565b50612e85600091612e7f6002611f96565b90612c39565b612e98612e926000610dca565b916101ca565b1415600014612f2f57612eab601c612c99565b905b612eb684612c5b565b9293612ec0612be0565b938415612f2a57612eda600095612eec9360209809612c5b565b90612ee36100a3565b94859485612e22565b838052039060015afa15612f2557612f1b612f15612f2192612f0f600051610e78565b9461353a565b92610113565b91610113565b1490565b610eca565b612c23565b612f39601b612c7a565b90612ead565b909391612f719593612f6591612f53611cbe565b50612f5c611cbe565b5090859161359c565b919490919293946135c7565b91909190565b600090565b612fbf9695936001612fb394612fa68285612f9e612fad97612fb99c99612569565b018092612569565b0190612583565b90612583565b90612583565b90612583565b90565b939160009661302d929361301960209a61301361304c9a61300d61303b9a612fe8612f77565b50613007612ff660fe612541565b9b6130016002610f05565b9e6130df565b986130df565b946130df565b936130df565b926130226100a3565b9788968c8801612f7c565b8682018103825203826108c1565b6130436100a3565b918291826125d4565b039060025afa156130795760006130638151610e78565b61306b612f77565b506040519082820152015190565b610eca565b606090565b613092613098919392936101ca565b926101ca565b82018092116130a357565b610ade565b90565b6130b76130bc916101ca565b6130a8565b9052565b6001816130d36130db9360209695612569565b0180926130ab565b0190565b9061311c613117613142926130f261307e565b5061311261310c6002926131066002611f96565b90612c39565b91611f96565b613083565b610b46565b6131336131276100a3565b938492602084016130c0565b602082018103825203826108c1565b90565b60207f6420454320706f696e7420707265666978000000000000000000000000000000917f456c6c697074696343757276653a696e6e76616c696420636f6d70726573736560008201520152565b6131a06031604092611591565b6131a981613145565b0190565b6131c39060208101906000818303910152613193565b90565b156131cd57565b6131d56100a3565b62461bcd60e51b8152806131eb600482016131ad565b0390fd5b6132036131fe6132089261119b565b610652565b6101ca565b90565b61321761321d916101ca565b916101ca565b908115613228570490565b612c23565b93929091613239611cbe565b508461324e6132486002610f05565b91610299565b148015613335575b61325f906131c6565b8283848691821561333057098591821561332b57099290849182156133265709908391821561332157088291821561331c576132ed926132dd926132cc92086132c56132b5866132af600161102e565b90613083565b6132bf60046131ef565b9061320b565b8591613780565b936132d78591610c0b565b90613083565b6132e76002611f96565b90612c39565b6133006132fa6000610dca565b916101ca565b1460001461330d57505b90565b9061331791612bfe565b61330a565b612c23565b612c23565b612c23565b612c23565b612c23565b5061325f8561334d6133476003610fe8565b91610299565b149050613256565b9290939193613362610868565b506000613377613371866101ca565b91610dca565b148015613499575b801561347e575b8015613463575b61345957808391821561345457099280818491821561344f5709818491821561344a570994806133c66133c06000610dca565b916101ca565b03613421575b5050806133e26133dc6000610dca565b916101ca565b03613401575b50506133f76133fd91926101ca565b916101ca565b1490565b9091929091801561341c576133fd926133f7920892916133e8565b612c23565b90919491908391821561344557098291821561344057089238806133cc565b612c23565b612c23565b612c23565b612c23565b612c23565b5050505050600090565b5080613477613471856101ca565b916101ca565b101561338d565b50600061349361348d836101ca565b91610dca565b14613386565b50836134ad6134a7856101ca565b916101ca565b101561337f565b916134f59493916134e7936134c7611cbe565b506134d0611cbe565b509091600193926134e1879561102e565b9261386f565b92919092909290919261398e565b91909190565b600090565b60208161351261351a938396956130ab565b0180926130ab565b0190565b61353261352d613537926101ca565b610652565b610108565b90565b61358f61359992613577613594936135506134fb565b5061356861355c6100a3565b93849260208401613500565b602082018103825203826108c1565b61358961358382610be6565b91610d5a565b2061292d565b61351e565b610671565b90565b916135bf6135c49294936135ae611cbe565b506135b7611cbe565b509482612bfe565b612c39565b90565b92909493916135d4611cbe565b506135dd611cbe565b506135e86000610dca565b506135f36000610dca565b506135fe6000610dca565b508361361261360c836101ca565b916101ca565b14600014613695575084908491821561369057086136396136336000610dca565b916101ca565b1460001461365f575050505060009061365c613656600093610dca565b92610dca565b90565b61368a9361367b9260019291613675869461102e565b91614188565b92919290925b9290919261398e565b91909190565b612c23565b91509361368a946136c393919060019390916001906136bd6136b7899761102e565b9261102e565b94613a77565b9291929092613681565b60007f456c6c697074696343757276653a206d6f64756c7573206973207a65726f0000910152565b613702601e602092611591565b61370b816136cd565b0190565b61372590602081019060008183039101526136f5565b90565b1561372f57565b6137376100a3565b62461bcd60e51b81528061374d6004820161370f565b0390fd5b90565b61376861376361376d92613751565b610652565b6101ca565b90565b61377d600160ff1b613754565b90565b909161378a611cbe565b506137a9816137a261379c6000610dca565b916101ca565b1415613728565b816137bd6137b76000610dca565b916101ca565b1461385f57826137d66137d06000610dca565b916101ca565b1461384f5791906137e7600161102e565b926137f0613770565b925b60008411613801575050505090565b9091929382808080601094818a881615158a0a918009098160028a0487161515890a91800909816004890486161515880a91800909816008880485161515870a9180090994049291906137f2565b50505061385c600161102e565b90565b50505061386c6000610dca565b90565b949392919461387c611cbe565b50613885611cbe565b5061388e611cbe565b50806138a361389d6000610dca565b916101ca565b146139805795906138b46000610dca565b956138bf6000610dca565b936138ca600161102e565b985b806138e06138da6000610dca565b916101ca565b1461396f57806138f0600161102e565b166139046138fe6000610dca565b916101ca565b03613941575b9061392361392f939261391d6002611f96565b9061320b565b93919087918993614188565b979197949097929791979490946138cc565b9761392395829a61392f949361395f93929187908692938d95613a77565b9a9196909699919293505061390a565b505050509250929050919291929190565b509150939150919291929190565b916139b0909493919461399f611cbe565b506139a8611cbe565b508290614406565b918283839182156139ee57099081839182156139e95709949290829182156139e45709909182156139df570990565b612c23565b612c23565b612c23565b612c23565b60007f557365206a6163446f75626c652066756e6374696f6e20696e73746561640000910152565b613a28601e602092611591565b613a31816139f3565b0190565b613a4b9060208101906000818303910152613a1b565b90565b15613a5557565b613a5d6100a3565b62461bcd60e51b815280613a7360048201613a35565b0390fd5b929694959693909193613a88611cbe565b50613a91611cbe565b50613a9a611cbe565b5083613aaf613aa96000610dca565b916101ca565b148061416d575b61415e5780613ace613ac86000610dca565b916101ca565b1480614143575b61413457613ae16109ad565b9285868a90811561412f57613b0a9209613b0586613aff6000610dca565b90611004565b611cc3565b85613b27613b2286613b1c6000610dca565b90611004565b611021565b8a90811561412a57613b4d9209613b4886613b42600161102e565b90611004565b611cc3565b87888a90811561412557613b759209613b7086613b6a6002611f96565b90611004565b611cc3565b87613b92613b8d86613b876002611f96565b90611004565b611021565b8a90811561412057613bb89209613bb386613bad6003611ee4565b90611004565b611cc3565b613bc26004610979565b94613bdf613bda86613bd46002611f96565b90611004565b611021565b8a90811561411b57613bf5920960008701611cc3565b613c11613c0c85613c066003611ee4565b90611004565b611021565b8990811561411657613c27920960208601611cc3565b90613c44613c3f84613c396000610dca565b90611004565b611021565b908892831561411157613c7993613c7493613c63920960408701611cc3565b92613c6e600161102e565b90611004565b611021565b8690811561410c57613c8f920960608301611cc3565b93613cac613ca786613ca16000610dca565b90611004565b611021565b613cd9613cd3613cce613cc989613cc36002611f96565b90611004565b611021565b6101ca565b916101ca565b141580156140b6575b613ceb90613a4e565b613cf36109ad565b93613d10613d0b87613d056002611f96565b90611004565b611021565b613d3683613d30613d2b8a613d256000610dca565b90611004565b611021565b90612bfe565b839081156140b157613d5c9208613d5787613d516000610dca565b90611004565b611cc3565b613d78613d7387613d6d6003611ee4565b90611004565b611021565b613d9e83613d98613d938a613d8d600161102e565b90611004565b611021565b90612bfe565b839081156140ac57613dc49208613dbf87613db9600161102e565b90611004565b611cc3565b613de0613ddb86613dd56000610dca565b90611004565b611021565b613dfc613df787613df16000610dca565b90611004565b611021565b839081156140a757613e229209613e1d87613e176002611f96565b90611004565b611cc3565b613e3e613e3986613e336002611f96565b90611004565b611021565b613e5a613e5587613e4f6000610dca565b90611004565b611021565b839081156140a257613e809209613e7b87613e756003611ee4565b90611004565b611cc3565b613e9c613e9786613e91600161102e565b90611004565b611021565b613eb8613eb387613ead600161102e565b90611004565b611021565b8391821561409d5709613ee783613ee1613edc89613ed66003611ee4565b90611004565b611021565b90612bfe565b83918215614098570882600290613f10613f0b8a613f056000610dca565b90611004565b611021565b613f2c613f278a613f216002611f96565b90611004565b611021565b8691821561409357098590811561408e57613f49613f5094611f96565b0990612bfe565b83918215614089570895613f76613f7187613f6b600161102e565b90611004565b611021565b613f92613f8d83613f876000610dca565b90611004565b611021565b613fae613fa989613fa36002611f96565b90611004565b611021565b859182156140845709613fc2858a90612bfe565b8591821561407f57088491821561407a570990613ff2613fed8592613fe7600161102e565b90611004565b611021565b9061400f61400a896140046003611ee4565b90611004565b611021565b8590811561407557614022930990612bfe565b90838015614070576140499261404492089661403e6000610dca565b90611004565b611021565b92908291821561406b570990918215614066570992919291929190565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b50613ceb6140d66140d1876140cb600161102e565b90611004565b611021565b6141036140fd6140f86140f38a6140ed6003611ee4565b90611004565b611021565b6101ca565b916101ca565b14159050613ce2565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b50509350909350919291929190565b50816141586141526000610dca565b916101ca565b14613ad5565b93509495505050919291929190565b508261418261417c6000610dca565b916101ca565b14613ab6565b94929493909193614197611cbe565b506141a0611cbe565b506141a9611cbe565b50846141be6141b86000610dca565b916101ca565b146143405780818391821561433b570995838484918215614336570991868785918215614331570990600490848691821561432c57098591821561432757614205906131ef565b0997600390859182156143225761421b90611ee4565b099190808591821561431d57098491821561431857098391821561431357089586878491821561430e570983829083869081156143095761425d930890612bfe565b8491821561430457089690614273848990612bfe565b849182156142ff5708839182156142fa5709908260089180859182156142f55709849081156142f0576142a86142af94610a35565b0990612bfe565b829182156142eb57089360029290829182156142e65709909182156142e1576142d790611f96565b0992919291929190565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b612c23565b9193945050919291929190565b60007f496e76616c6964206e756d626572000000000000000000000000000000000000910152565b614382600e602092611591565b61438b8161434d565b0190565b6143a59060208101906000818303910152614375565b90565b156143af57565b6143b76100a3565b62461bcd60e51b8152806143cd6004820161438f565b0390fd5b6143e06143e6919392936101ca565b926101ca565b916143f28382026101ca565b92818404149015171561440157565b610ade565b61440e611cbe565b508061442361441d6000610dca565b916101ca565b1415806144f2575b806144d1575b61443a906143a8565b6144446000610dca565b61444e600161102e565b8390614458611cbe565b505b8361446e6144686000610dca565b916101ca565b146144c95761447e82859061320b565b819391868291889081156144c457614497930990612bfe565b918680156144bf576144b8936144b2920894958094926143d1565b90612bfe565b929161445a565b612c23565b612c23565b505091505090565b5061443a826144e96144e36000610dca565b916101ca565b14159050614431565b5080614506614500846101ca565b916101ca565b141561442b56fea2646970667358221220c30cb84667db8c8820f0bf36b1639dad7be044d3dd48da226290fc5d51eacabb64736f6c634300081e0033",
}

// VerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use VerifierMetaData.ABI instead.
var VerifierABI = VerifierMetaData.ABI

// VerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use VerifierMetaData.Bin instead.
var VerifierBin = VerifierMetaData.Bin

// DeployVerifier deploys a new Ethereum contract, binding an instance of Verifier to it.
func DeployVerifier(auth *bind.TransactOpts, backend bind.ContractBackend, _bloom common.Address) (common.Address, *types.Transaction, *Verifier, error) {
	parsed, err := VerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VerifierBin), backend, _bloom)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// Verifier is an auto generated Go binding around an Ethereum contract.
type Verifier struct {
	VerifierCaller     // Read-only binding to the contract
	VerifierTransactor // Write-only binding to the contract
	VerifierFilterer   // Log filterer for contract events
}

// VerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type VerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VerifierSession struct {
	Contract     *Verifier         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VerifierCallerSession struct {
	Contract *VerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// VerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VerifierTransactorSession struct {
	Contract     *VerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// VerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type VerifierRaw struct {
	Contract *Verifier // Generic contract binding to access the raw methods on
}

// VerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VerifierCallerRaw struct {
	Contract *VerifierCaller // Generic read-only contract binding to access the raw methods on
}

// VerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VerifierTransactorRaw struct {
	Contract *VerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVerifier creates a new instance of Verifier, bound to a specific deployed contract.
func NewVerifier(address common.Address, backend bind.ContractBackend) (*Verifier, error) {
	contract, err := bindVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// NewVerifierCaller creates a new read-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierCaller(address common.Address, caller bind.ContractCaller) (*VerifierCaller, error) {
	contract, err := bindVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierCaller{contract: contract}, nil
}

// NewVerifierTransactor creates a new write-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*VerifierTransactor, error) {
	contract, err := bindVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierTransactor{contract: contract}, nil
}

// NewVerifierFilterer creates a new log filterer instance of Verifier, bound to a specific deployed contract.
func NewVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*VerifierFilterer, error) {
	contract, err := bindVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VerifierFilterer{contract: contract}, nil
}

// bindVerifier binds a generic wrapper to an already deployed contract.
func bindVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := VerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.VerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transact(opts, method, params...)
}

// Bloom is a free data retrieval call binding the contract method 0xd26da14f.
//
// Solidity: function bloom() view returns(address)
func (_Verifier *VerifierCaller) Bloom(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "bloom")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bloom is a free data retrieval call binding the contract method 0xd26da14f.
//
// Solidity: function bloom() view returns(address)
func (_Verifier *VerifierSession) Bloom() (common.Address, error) {
	return _Verifier.Contract.Bloom(&_Verifier.CallOpts)
}

// Bloom is a free data retrieval call binding the contract method 0xd26da14f.
//
// Solidity: function bloom() view returns(address)
func (_Verifier *VerifierCallerSession) Bloom() (common.Address, error) {
	return _Verifier.Contract.Bloom(&_Verifier.CallOpts)
}

// CheckCredential is a free data retrieval call binding the contract method 0xeafa217e.
//
// Solidity: function checkCredential(bytes pubKey, bytes signature, bytes proof, uint256 epoch) view returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierCaller) CheckCredential(opts *bind.CallOpts, pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (struct {
	Valid     bool
	ErrorCode uint8
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "checkCredential", pubKey, signature, proof, epoch)

	outstruct := new(struct {
		Valid     bool
		ErrorCode uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Valid = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ErrorCode = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// CheckCredential is a free data retrieval call binding the contract method 0xeafa217e.
//
// Solidity: function checkCredential(bytes pubKey, bytes signature, bytes proof, uint256 epoch) view returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierSession) CheckCredential(pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (struct {
	Valid     bool
	ErrorCode uint8
}, error) {
	return _Verifier.Contract.CheckCredential(&_Verifier.CallOpts, pubKey, signature, proof, epoch)
}

// CheckCredential is a free data retrieval call binding the contract method 0xeafa217e.
//
// Solidity: function checkCredential(bytes pubKey, bytes signature, bytes proof, uint256 epoch) view returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierCallerSession) CheckCredential(pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (struct {
	Valid     bool
	ErrorCode uint8
}, error) {
	return _Verifier.Contract.CheckCredential(&_Verifier.CallOpts, pubKey, signature, proof, epoch)
}

// CheckCredentialFast is a free data retrieval call binding the contract method 0x83a5cc32.
//
// Solidity: function checkCredentialFast(bytes pubKey, bytes signature, bytes proof, uint256 epoch, uint256[2] uPoint, uint256[4] vComponents) view returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierCaller) CheckCredentialFast(opts *bind.CallOpts, pubKey []byte, signature []byte, proof []byte, epoch *big.Int, uPoint [2]*big.Int, vComponents [4]*big.Int) (struct {
	Valid     bool
	ErrorCode uint8
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "checkCredentialFast", pubKey, signature, proof, epoch, uPoint, vComponents)

	outstruct := new(struct {
		Valid     bool
		ErrorCode uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Valid = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ErrorCode = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// CheckCredentialFast is a free data retrieval call binding the contract method 0x83a5cc32.
//
// Solidity: function checkCredentialFast(bytes pubKey, bytes signature, bytes proof, uint256 epoch, uint256[2] uPoint, uint256[4] vComponents) view returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierSession) CheckCredentialFast(pubKey []byte, signature []byte, proof []byte, epoch *big.Int, uPoint [2]*big.Int, vComponents [4]*big.Int) (struct {
	Valid     bool
	ErrorCode uint8
}, error) {
	return _Verifier.Contract.CheckCredentialFast(&_Verifier.CallOpts, pubKey, signature, proof, epoch, uPoint, vComponents)
}

// CheckCredentialFast is a free data retrieval call binding the contract method 0x83a5cc32.
//
// Solidity: function checkCredentialFast(bytes pubKey, bytes signature, bytes proof, uint256 epoch, uint256[2] uPoint, uint256[4] vComponents) view returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierCallerSession) CheckCredentialFast(pubKey []byte, signature []byte, proof []byte, epoch *big.Int, uPoint [2]*big.Int, vComponents [4]*big.Int) (struct {
	Valid     bool
	ErrorCode uint8
}, error) {
	return _Verifier.Contract.CheckCredentialFast(&_Verifier.CallOpts, pubKey, signature, proof, epoch, uPoint, vComponents)
}

// GetFastVerifyParams is a free data retrieval call binding the contract method 0x79c3faf9.
//
// Solidity: function getFastVerifyParams(bytes pubKey, bytes proof, uint256 epoch) view returns(uint256[2] uPoint, uint256[4] vComponents)
func (_Verifier *VerifierCaller) GetFastVerifyParams(opts *bind.CallOpts, pubKey []byte, proof []byte, epoch *big.Int) (struct {
	UPoint      [2]*big.Int
	VComponents [4]*big.Int
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "getFastVerifyParams", pubKey, proof, epoch)

	outstruct := new(struct {
		UPoint      [2]*big.Int
		VComponents [4]*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.UPoint = *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)
	outstruct.VComponents = *abi.ConvertType(out[1], new([4]*big.Int)).(*[4]*big.Int)

	return *outstruct, err

}

// GetFastVerifyParams is a free data retrieval call binding the contract method 0x79c3faf9.
//
// Solidity: function getFastVerifyParams(bytes pubKey, bytes proof, uint256 epoch) view returns(uint256[2] uPoint, uint256[4] vComponents)
func (_Verifier *VerifierSession) GetFastVerifyParams(pubKey []byte, proof []byte, epoch *big.Int) (struct {
	UPoint      [2]*big.Int
	VComponents [4]*big.Int
}, error) {
	return _Verifier.Contract.GetFastVerifyParams(&_Verifier.CallOpts, pubKey, proof, epoch)
}

// GetFastVerifyParams is a free data retrieval call binding the contract method 0x79c3faf9.
//
// Solidity: function getFastVerifyParams(bytes pubKey, bytes proof, uint256 epoch) view returns(uint256[2] uPoint, uint256[4] vComponents)
func (_Verifier *VerifierCallerSession) GetFastVerifyParams(pubKey []byte, proof []byte, epoch *big.Int) (struct {
	UPoint      [2]*big.Int
	VComponents [4]*big.Int
}, error) {
	return _Verifier.Contract.GetFastVerifyParams(&_Verifier.CallOpts, pubKey, proof, epoch)
}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() view returns(address)
func (_Verifier *VerifierCaller) Issuer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "issuer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() view returns(address)
func (_Verifier *VerifierSession) Issuer() (common.Address, error) {
	return _Verifier.Contract.Issuer(&_Verifier.CallOpts)
}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() view returns(address)
func (_Verifier *VerifierCallerSession) Issuer() (common.Address, error) {
	return _Verifier.Contract.Issuer(&_Verifier.CallOpts)
}

// MeasureCheckCredentialFastGas is a paid mutator transaction binding the contract method 0x9e93651e.
//
// Solidity: function measureCheckCredentialFastGas(bytes pubKey, bytes signature, bytes proof, uint256 epoch, uint256[2] uPoint, uint256[4] vComponents) returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierTransactor) MeasureCheckCredentialFastGas(opts *bind.TransactOpts, pubKey []byte, signature []byte, proof []byte, epoch *big.Int, uPoint [2]*big.Int, vComponents [4]*big.Int) (*types.Transaction, error) {
	return _Verifier.contract.Transact(opts, "measureCheckCredentialFastGas", pubKey, signature, proof, epoch, uPoint, vComponents)
}

// MeasureCheckCredentialFastGas is a paid mutator transaction binding the contract method 0x9e93651e.
//
// Solidity: function measureCheckCredentialFastGas(bytes pubKey, bytes signature, bytes proof, uint256 epoch, uint256[2] uPoint, uint256[4] vComponents) returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierSession) MeasureCheckCredentialFastGas(pubKey []byte, signature []byte, proof []byte, epoch *big.Int, uPoint [2]*big.Int, vComponents [4]*big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.MeasureCheckCredentialFastGas(&_Verifier.TransactOpts, pubKey, signature, proof, epoch, uPoint, vComponents)
}

// MeasureCheckCredentialFastGas is a paid mutator transaction binding the contract method 0x9e93651e.
//
// Solidity: function measureCheckCredentialFastGas(bytes pubKey, bytes signature, bytes proof, uint256 epoch, uint256[2] uPoint, uint256[4] vComponents) returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierTransactorSession) MeasureCheckCredentialFastGas(pubKey []byte, signature []byte, proof []byte, epoch *big.Int, uPoint [2]*big.Int, vComponents [4]*big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.MeasureCheckCredentialFastGas(&_Verifier.TransactOpts, pubKey, signature, proof, epoch, uPoint, vComponents)
}

// MeasureCheckCredentialGas is a paid mutator transaction binding the contract method 0x5f1c7a21.
//
// Solidity: function measureCheckCredentialGas(bytes pubKey, bytes signature, bytes proof, uint256 epoch) returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierTransactor) MeasureCheckCredentialGas(opts *bind.TransactOpts, pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (*types.Transaction, error) {
	return _Verifier.contract.Transact(opts, "measureCheckCredentialGas", pubKey, signature, proof, epoch)
}

// MeasureCheckCredentialGas is a paid mutator transaction binding the contract method 0x5f1c7a21.
//
// Solidity: function measureCheckCredentialGas(bytes pubKey, bytes signature, bytes proof, uint256 epoch) returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierSession) MeasureCheckCredentialGas(pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.MeasureCheckCredentialGas(&_Verifier.TransactOpts, pubKey, signature, proof, epoch)
}

// MeasureCheckCredentialGas is a paid mutator transaction binding the contract method 0x5f1c7a21.
//
// Solidity: function measureCheckCredentialGas(bytes pubKey, bytes signature, bytes proof, uint256 epoch) returns(bool valid, uint8 errorCode)
func (_Verifier *VerifierTransactorSession) MeasureCheckCredentialGas(pubKey []byte, signature []byte, proof []byte, epoch *big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.MeasureCheckCredentialGas(&_Verifier.TransactOpts, pubKey, signature, proof, epoch)
}

// Update is a paid mutator transaction binding the contract method 0xe9b2cd3f.
//
// Solidity: function update(bytes[] newFilters, uint256[] ks, uint256[] bitLens) returns()
func (_Verifier *VerifierTransactor) Update(opts *bind.TransactOpts, newFilters [][]byte, ks []*big.Int, bitLens []*big.Int) (*types.Transaction, error) {
	return _Verifier.contract.Transact(opts, "update", newFilters, ks, bitLens)
}

// Update is a paid mutator transaction binding the contract method 0xe9b2cd3f.
//
// Solidity: function update(bytes[] newFilters, uint256[] ks, uint256[] bitLens) returns()
func (_Verifier *VerifierSession) Update(newFilters [][]byte, ks []*big.Int, bitLens []*big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.Update(&_Verifier.TransactOpts, newFilters, ks, bitLens)
}

// Update is a paid mutator transaction binding the contract method 0xe9b2cd3f.
//
// Solidity: function update(bytes[] newFilters, uint256[] ks, uint256[] bitLens) returns()
func (_Verifier *VerifierTransactorSession) Update(newFilters [][]byte, ks []*big.Int, bitLens []*big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.Update(&_Verifier.TransactOpts, newFilters, ks, bitLens)
}
